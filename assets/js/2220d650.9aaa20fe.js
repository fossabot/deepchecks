"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[716],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),k=p(a),d=r,u=k["".concat(o,".").concat(d)]||k[d]||c[d]||l;return a?n.createElement(u,i(i({ref:t},m),{},{components:a})):n.createElement(u,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},742:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return k}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],s={},o="deepchecks.checks.performance package",p={unversionedId:"api-reference/deepchecks.checks.performance",id:"api-reference/deepchecks.checks.performance",isDocsHomePage:!1,title:"deepchecks.checks.performance package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.checks.performance.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.checks.performance",permalink:"/docs/api-reference/deepchecks.checks.performance",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.checks.overview package",permalink:"/docs/api-reference/deepchecks.checks.overview"},next:{title:"deepchecks package",permalink:"/docs/api-reference/deepchecks"}},m=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.checks.performance.calibration_metric module",id:"deepcheckschecksperformancecalibration_metric-module",children:[{value:"class CalibrationMetric()",id:"class-calibrationmetric",children:[{value:"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)",id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.performance.confusion_matrix_report module",id:"deepcheckschecksperformanceconfusion_matrix_report-module",children:[{value:"class ConfusionMatrixReport()",id:"class-confusionmatrixreport",children:[{value:"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)",id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.performance.partition module",id:"deepcheckschecksperformancepartition-module",children:[{value:"class DeepchecksFilter()",id:"class-deepchecksfilter",children:[{value:"__init__(filter_func: Callable, label: str)",id:"__init__filter_func-callable-label-str",children:[],level:4},{value:"filter(dataframe)",id:"filterdataframe",children:[],level:4}],level:3},{value:"partition_column(dataset: deepchecks.base.dataset.Dataset, column_name: str, max_segments: int, max_cat_proportions: float = 0.9)",id:"partition_columndataset-deepchecksbasedatasetdataset-column_name-str-max_segments-int-max_cat_proportions-float--09",children:[],level:3}],level:2},{value:"deepchecks.checks.performance.performance_report module",id:"deepcheckschecksperformanceperformance_report-module",children:[{value:"class PerformanceReport()",id:"class-performancereport",children:[{value:"__init__(alternative_metrics: Optional[Dictstr, Callable] = None)",id:"__init__alternative_metrics-optionaldictstr-callable--none",children:[],level:4},{value:"add_condition_score_not_less_than(min_score: float)",id:"add_condition_score_not_less_thanmin_score-float",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.performance.roc_report module",id:"deepcheckschecksperformanceroc_report-module",children:[{value:"class RocReport()",id:"class-rocreport",children:[{value:"__init__(excluded_classes: OptionalList = None)",id:"__init__excluded_classes-optionallist--none",children:[],level:4},{value:"add_condition_auc_not_less_than(min_auc: float = 0.7)",id:"add_condition_auc_not_less_thanmin_auc-float--07",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)",id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator-2",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.performance.segment_performance module",id:"deepcheckschecksperformancesegment_performance-module",children:[{value:"class SegmentPerformance()",id:"class-segmentperformance",children:[{value:"__init__(feature_1: Optionalstr = None, feature_2: Optionalstr = None, metric: Optional[UnionCallable, str] = None, max_segments: int = 10)",id:"__init__feature_1-optionalstr--none-feature_2-optionalstr--none-metric-optionalunioncallable-str--none-max_segments-int--10",children:[],level:4},{value:"feature_1(: str)",id:"feature_1-str",children:[],level:4},{value:"feature_2(: str)",id:"feature_2-str",children:[],level:4},{value:"max_segments(: int)",id:"max_segments-int",children:[],level:4},{value:"metric(: Unionstr, Callable)",id:"metric-unionstr-callable",children:[],level:4},{value:"run(dataset, model)",id:"rundataset-model",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.performance.simple_model_comparison module",id:"deepcheckschecksperformancesimple_model_comparison-module",children:[{value:"class SimpleModelComparison()",id:"class-simplemodelcomparison",children:[{value:"__init__(simple_model_type: str = &#39;constant&#39;, metric: Optional[UnionCallable, str] = None, metric_name: Optionalstr = None, maximum_ratio: int = 50, max_depth: int = 3, random_state: int = 42)",id:"__init__simple_model_type-str--constant-metric-optionalunioncallable-str--none-metric_name-optionalstr--none-maximum_ratio-int--50-max_depth-int--3-random_state-int--42",children:[],level:4},{value:"add_condition_ratio_not_less_than(min_allowed_ratio: float = 1.1)",id:"add_condition_ratio_not_less_thanmin_allowed_ratio-float--11",children:[],level:4},{value:"run(train_dataset, test_dataset, model)",id:"runtrain_dataset-test_dataset-model",children:[],level:4}],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],c={toc:m};function k(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"deepcheckschecksperformance-package"},"deepchecks.checks.performance package"),(0,l.kt)("h2",{id:"submodules"},"Submodules"),(0,l.kt)("h2",{id:"deepcheckschecksperformancecalibration_metric-module"},"deepchecks.checks.performance.calibration_metric module"),(0,l.kt)("p",null,"The calibration_metric check module."),(0,l.kt)("h3",{id:"class-calibrationmetric"},"class CalibrationMetric()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,l.kt)("p",null,"Calculate the calibration curve with brier score for each class."),(0,l.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator"},"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," \u2013 a Dataset object")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  value is dictionary of class and it\u2019s brier score, displays the calibration curve\ngraph with each class")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  CheckResult")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,l.kt)("h2",{id:"deepcheckschecksperformanceconfusion_matrix_report-module"},"deepchecks.checks.performance.confusion_matrix_report module"),(0,l.kt)("p",null,"The confusion_matrix_report check module."),(0,l.kt)("h3",{id:"class-confusionmatrixreport"},"class ConfusionMatrixReport()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,l.kt)("p",null,"Calculate the confusion matrix of the model on the given dataset."),(0,l.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator-1"},"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," \u2013 a Dataset object")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  value is numpy array of the confusion matrix, displays the confusion matrix")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  CheckResult")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,l.kt)("h2",{id:"deepcheckschecksperformancepartition-module"},"deepchecks.checks.performance.partition module"),(0,l.kt)("p",null,"Module of functions to partition columns into segments."),(0,l.kt)("h3",{id:"class-deepchecksfilter"},"class DeepchecksFilter()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Contains a filter function which works on a dataframe and a label describing the filter."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"filter_func")," (",(0,l.kt)("em",{parentName:"p"},"Callable"),") \u2013 function which receive dataframe and return a filter on it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"label")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 name of the filter"))))),(0,l.kt)("h4",{id:"__init__filter_func-callable-label-str"},"_","_init__(filter_func: Callable, label: str)"),(0,l.kt)("h4",{id:"filterdataframe"},"filter(dataframe)"),(0,l.kt)("p",null,"Run the filter on given dataframe."),(0,l.kt)("h3",{id:"partition_columndataset-deepchecksbasedatasetdataset-column_name-str-max_segments-int-max_cat_proportions-float--09"},"partition_column(dataset: deepchecks.base.dataset.Dataset, column_name: str, max_segments: int, max_cat_proportions: float = 0.9)"),(0,l.kt)("p",null,"Split column into segments."),(0,l.kt)("p",null,"For categorical we\u2019ll have a max of max_segments + 1, for the \u2018Others\u2019. We take the largest categories which\ncumulative percent in data is equal/larger than max_cat_proportions. the rest will go to \u2018Others\u2019 even if less\nthan max_segments.\nFor numerical we split into maximum number of max_segments quantiles. if some of the quantiles are duplicates\nthen we merge them into the same segment range (so not all ranges necessarily will have same size)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"column_name")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 column to partition.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"max_segments")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 maximum number of segments to split into.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"max_cat_proportions")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 (for categorical) ratio to aggregate largest values to show."))))),(0,l.kt)("h2",{id:"deepcheckschecksperformanceperformance_report-module"},"deepchecks.checks.performance.performance_report module"),(0,l.kt)("p",null,"Module containing performance report check."),(0,l.kt)("h3",{id:"class-performancereport"},"class PerformanceReport()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,l.kt)("p",null,"Summarize given metrics on a dataset and model."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"alternative_metrics")," (",(0,l.kt)("em",{parentName:"p"},"Dict",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"Callable**]"),") \u2013 An optional dictionary of metric name to scorer functions.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"given")," (",(0,l.kt)("em",{parentName:"p"},"If none"),") \u2013 ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"metrics")," (",(0,l.kt)("em",{parentName:"p"},"using default"),") \u2013 "))))),(0,l.kt)("h4",{id:"__init__alternative_metrics-optionaldictstr-callable--none"},"_","_init__(alternative_metrics: Optional[Dict","[str, Callable]","] = None)"),(0,l.kt)("h4",{id:"add_condition_score_not_less_thanmin_score-float"},"add_condition_score_not_less_than(min_score: float)"),(0,l.kt)("p",null,"Add condition - metric scores are not less than given score."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"min_score")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 Minimal score to pass."))),(0,l.kt)("h4",{id:"rundataset-modelnone"},"run(dataset, model=None)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 a Dataset object")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  value is dictionary in format \u2018metric\u2019: score")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  CheckResult"))),(0,l.kt)("h2",{id:"deepcheckschecksperformanceroc_report-module"},"deepchecks.checks.performance.roc_report module"),(0,l.kt)("p",null,"The roc_report check module."),(0,l.kt)("h3",{id:"class-rocreport"},"class RocReport()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,l.kt)("p",null,"Calculate the AUC (Area Under Curve) for each class."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"excluded_classes")," (",(0,l.kt)("em",{parentName:"p"},"List"),") \u2013 List of classes to exclude from the condition."))),(0,l.kt)("h4",{id:"__init__excluded_classes-optionallist--none"},"_","_init__(excluded_classes: Optional","[List]"," = None)"),(0,l.kt)("h4",{id:"add_condition_auc_not_less_thanmin_auc-float--07"},"add_condition_auc_not_less_than(min_auc: float = 0.7)"),(0,l.kt)("p",null,"Add condition - require min allowed AUC score per class."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"min_auc")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 Max allowed AUC score per class."))),(0,l.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-model-sklearnbasebaseestimator-2"},"run(dataset: deepchecks.base.dataset.Dataset, model: sklearn.base.BaseEstimator)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," \u2013 a Dataset object")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  value is dictionary of class and it\u2019s auc score, displays the roc graph with each class")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  CheckResult")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,l.kt)("h2",{id:"deepcheckschecksperformancesegment_performance-module"},"deepchecks.checks.performance.segment_performance module"),(0,l.kt)("p",null,"Module of segment performance check."),(0,l.kt)("h3",{id:"class-segmentperformance"},"class SegmentPerformance()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,l.kt)("p",null,"Display performance metric segmented by 2 top (or given) features in a heatmap."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"feature_1")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 feature to segment by on y-axis.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"feature_2")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 feature to segment by on x-axis.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"metric")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"Callable**]"),") \u2013 Metric to show, either function or sklearn scorer name. If no metric is given\na default metric (per the model type) will be used.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"max_segments")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 maximal number of segments to split the a values into."))))),(0,l.kt)("h4",{id:"__init__feature_1-optionalstr--none-feature_2-optionalstr--none-metric-optionalunioncallable-str--none-max_segments-int--10"},"_","_init__(feature_1: Optional","[str]"," = None, feature_2: Optional","[str]"," = None, metric: Optional[Union","[Callable, str]","] = None, max_segments: int = 10)"),(0,l.kt)("h4",{id:"feature_1-str"},"feature_1(: str)"),(0,l.kt)("h4",{id:"feature_2-str"},"feature_2(: str)"),(0,l.kt)("h4",{id:"max_segments-int"},"max_segments(: int)"),(0,l.kt)("h4",{id:"metric-unionstr-callable"},"metric(: Union","[str, Callable]",")"),(0,l.kt)("h4",{id:"rundataset-model"},"run(dataset, model)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 a Dataset object.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance."))))),(0,l.kt)("h2",{id:"deepcheckschecksperformancesimple_model_comparison-module"},"deepchecks.checks.performance.simple_model_comparison module"),(0,l.kt)("p",null,"Module containing simple comparison check."),(0,l.kt)("h3",{id:"class-simplemodelcomparison"},"class SimpleModelComparison()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,l.kt)("p",null,"Compare given model score to simple model score (according to given model type)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"simple_model_type")," (",(0,l.kt)("em",{parentName:"p"},"st"),") \u2013 Type of the simple model ","[\u2018random\u2019, \u2018constant\u2019, \u2018tree\u2019]",".\nrandom - select one of the labels by random.\nconstant - in regression is mean value, in classification the most common value.\ntree - runs a simple desion tree.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"metric")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"Callable**]"),") \u2013 a custom metric given by user.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"metric_name")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 name of a default metric.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"maximum_ratio")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 the ratio can be up to infinity so choose maximum value to limit to.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"max_depth")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 the max depth of the tree (used only if simple model type is tree).")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"random_state")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 the random state (used only if simple model type is tree or random)."))))),(0,l.kt)("h4",{id:"__init__simple_model_type-str--constant-metric-optionalunioncallable-str--none-metric_name-optionalstr--none-maximum_ratio-int--50-max_depth-int--3-random_state-int--42"},"_","_init__(simple_model_type: str = 'constant', metric: Optional[Union","[Callable, str]","] = None, metric_name: Optional","[str]"," = None, maximum_ratio: int = 50, max_depth: int = 3, random_state: int = 42)"),(0,l.kt)("h4",{id:"add_condition_ratio_not_less_thanmin_allowed_ratio-float--11"},"add_condition_ratio_not_less_than(min_allowed_ratio: float = 1.1)"),(0,l.kt)("p",null,"Add condition - require min allowed ratio between the given and the simple model."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"min_allowed_ratio")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 Min allowed ratio between the given and the simple model -")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"ratio is given model / simple"),") \u2013 "))))),(0,l.kt)("h4",{id:"runtrain_dataset-test_dataset-model"},"run(train_dataset, test_dataset, model)"),(0,l.kt)("p",null,"Run check."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain a label.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain a label.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 A scikit-learn-compatible fitted estimator instance.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  value is a Dict of: given_model_score, simple_model_score, ratio"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  ratio is given model / simple model (if the metric returns negative values we divide 1 by it)\n  if ratio is infinite max_ratio is returned\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  CheckResult")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance."))),(0,l.kt)("h2",{id:"module-contents"},"Module contents"),(0,l.kt)("p",null,"Module contains checks of model performance metrics."))}k.isMDXComponent=!0}}]);