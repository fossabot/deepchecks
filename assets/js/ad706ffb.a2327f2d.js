"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[727],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return u}});var r=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,l=function(e,t){if(null==e)return{};var a,r,l={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=r.createContext({}),o=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,l=e.mdxType,n=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),k=o(a),u=l,d=k["".concat(c,".").concat(u)]||k[u]||m[u]||n;return a?r.createElement(d,p(p({ref:t},s),{},{components:a})):r.createElement(d,p({ref:t},s))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=a.length,p=new Array(n);p[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,p[1]=i;for(var o=2;o<n;o++)p[o]=a[o];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},2511:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return o},toc:function(){return s},default:function(){return k}});var r=a(7462),l=a(3366),n=(a(7294),a(3905)),p=["components"],i={},c="deepchecks package",o={unversionedId:"api-reference/deepchecks",id:"api-reference/deepchecks",isDocsHomePage:!1,title:"deepchecks package",description:"Subpackages",source:"@site/docs/api-reference/deepchecks.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks",permalink:"/docs/api-reference/deepchecks",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.checks.performance package",permalink:"/docs/api-reference/deepchecks.checks.performance"},next:{title:"deepchecks.suites package",permalink:"/docs/api-reference/deepchecks.suites"}},s=[{value:"Subpackages",id:"subpackages",children:[],level:2},{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.errors module",id:"deepcheckserrors-module",children:[{value:"exception DeepchecksBaseError()",id:"exception-deepchecksbaseerror",children:[{value:"__init__(message: str)",id:"__init__message-str",children:[],level:4}],level:3},{value:"exception DeepchecksValueError()",id:"exception-deepchecksvalueerror",children:[],level:3}],level:2},{value:"deepchecks.ppscore module",id:"deepchecksppscore-module",children:[{value:"matrix(df, output=&#39;df&#39;, sorted=False, **kwargs)",id:"matrixdf-outputdf-sortedfalse-kwargs",children:[],level:3},{value:"predictors(df, y, output=&#39;df&#39;, sorted=True, **kwargs)",id:"predictorsdf-y-outputdf-sortedtrue-kwargs",children:[],level:3},{value:"score(df, x, y, task=&#39;NOT_SUPPORTED_ANYMORE&#39;, sample=5000, cross_validation=4, random_seed=123, invalid_score=0, catch_errors=True)",id:"scoredf-x-y-tasknot_supported_anymore-sample5000-cross_validation4-random_seed123-invalid_score0-catch_errorstrue",children:[],level:3}],level:2},{value:"deepchecks.version module",id:"deepchecksversion-module",children:[],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],m={toc:s};function k(e){var t=e.components,a=(0,l.Z)(e,p);return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deepchecks-package"},"deepchecks package"),(0,n.kt)("h2",{id:"subpackages"},"Subpackages"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base.check module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base.dataset module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base.display_pandas module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base.display_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.base.suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Subpackages"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.plot module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.preprocessing module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.rare_category_encoder module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.train_test_drift module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.trust_score module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.distribution.trust_score_comparison module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.data_duplicates module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.dominant_frequency_change module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.is_single_value module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.label_ambiguity module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.mixed_nulls module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.mixed_types module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.new_category module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.new_label module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.rare_format_detection module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.special_chars module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.string_length_out_of_bounds module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.string_mismatch module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.integrity.string_mismatch_comparison module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.boosting_overfit module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.date_train_test_leakage_duplicates module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.date_train_test_leakage_overlap module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.identifier_leakage module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.index_leakage module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.performance_overfit module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.single_feature_contribution module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.single_feature_contribution_train_validation module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.train_test_samples_mix module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.methodology.unused_features module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.overview package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.overview.columns_info module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.overview.dataset_info module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.overview.model_info module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.calibration_metric module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.confusion_matrix_report module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.partition module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.performance_report module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.roc_report module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.segment_performance module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.checks.performance.simple_model_comparison module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites.distribution_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites.integrity_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites.methodology_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites.overall_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.suites.performance_suite module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils package"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Submodules")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.dataframes module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.features module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.ipython module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.metrics module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.plot module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.strings module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"deepchecks.utils.validation module")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Module contents"))))),(0,n.kt)("h2",{id:"submodules"},"Submodules"),(0,n.kt)("h2",{id:"deepcheckserrors-module"},"deepchecks.errors module"),(0,n.kt)("p",null,"Module with all deepchecks error types."),(0,n.kt)("h3",{id:"exception-deepchecksbaseerror"},"exception DeepchecksBaseError()"),(0,n.kt)("p",null,"Bases: ",(0,n.kt)("inlineCode",{parentName:"p"},"Exception")),(0,n.kt)("p",null,"Base exception class for all \u2018Deepchecks\u2019 error types."),(0,n.kt)("h4",{id:"__init__message-str"},"_","_init__(message: str)"),(0,n.kt)("h3",{id:"exception-deepchecksvalueerror"},"exception DeepchecksValueError()"),(0,n.kt)("p",null,"Bases: ",(0,n.kt)("inlineCode",{parentName:"p"},"deepchecks.errors.DeepchecksBaseError")),(0,n.kt)("p",null,"Exception class that represent a fault parameter was passed to Deepchecks."),(0,n.kt)("h2",{id:"deepchecksppscore-module"},"deepchecks.ppscore module"),(0,n.kt)("p",null,"PPS (Predictive Power Score) module."),(0,n.kt)("h3",{id:"matrixdf-outputdf-sortedfalse-kwargs"},"matrix(df, output='df', sorted=False, ","*","*","kwargs)"),(0,n.kt)("p",null,"Calculate the Predictive Power Score (PPS) matrix for all columns in the dataframe."),(0,n.kt)("p",null,"Args:\ndf : pandas.DataFrame"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The dataframe that contains the data")),(0,n.kt)("p",null,"output: str - potential values: \u201cdf\u201d, \u201clist\u201d"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Control the type of the output. Either return a pandas.DataFrame (df) or a list with the score dicts\n")),(0,n.kt)("p",null,"sorted: bool"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Whether or not to sort the output dataframe/list by the ppscore\n")),(0,n.kt)("p",null,"kwargs:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Other key-word arguments that shall be forwarded to the pps.score method,\ne.g. sample, \\`cross_validation, \\`random_seed, \\`invalid_score, catch_errors\n")),(0,n.kt)("p",null,"Returns:\npandas.DataFrame or list of Dict"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Either returns a tidy dataframe or a list of all the PPS dicts. This can be influenced\nby the output argument")),(0,n.kt)("h3",{id:"predictorsdf-y-outputdf-sortedtrue-kwargs"},"predictors(df, y, output='df', sorted=True, ","*","*","kwargs)"),(0,n.kt)("p",null,"Calculate the Predictive Power Score (PPS) of all the features in the dataframe."),(0,n.kt)("p",null,"against a target column"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"df")," (",(0,n.kt)("em",{parentName:"p"},"pandas.DataFrame"),") \u2013 The dataframe that contains the data")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"y")," (",(0,n.kt)("em",{parentName:"p"},"str"),") \u2013 Name of the column y which acts as the target")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"output")," (",(0,n.kt)("em",{parentName:"p"},'str - potential values: "df"',(0,n.kt)("strong",{parentName:"em"},", "),'"list"'),") \u2013 Control the type of the output. Either return a pandas.DataFrame (df) or a list with the score dicts")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"sorted")," (",(0,n.kt)("em",{parentName:"p"},"bool"),") \u2013 Whether or not to sort the output dataframe/list by the ppscore")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"kwargs")," \u2013 Other key-word arguments that shall be forwarded to the pps.score method,\ne.g. sample, ","`","cross_validation, ","`","random_seed, ","`","invalid_score, catch_errors")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("p",{parentName:"li"},"  Either returns a tidy dataframe or a list of all the PPS dicts. This can be influenced\nby the output argument")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Return type")),(0,n.kt)("p",{parentName:"li"},"  pandas.DataFrame or list of Dict"))),(0,n.kt)("h3",{id:"scoredf-x-y-tasknot_supported_anymore-sample5000-cross_validation4-random_seed123-invalid_score0-catch_errorstrue"},"score(df, x, y, task='NOT_SUPPORTED_ANYMORE', sample=5000, cross_validation=4, random_seed=123, invalid_score=0, catch_errors=True)"),(0,n.kt)("p",null,"Calculate the Predictive Power Score (PPS) for \u201cx predicts y\u201d."),(0,n.kt)("p",null,"The score always ranges from 0 to 1 and is data-type agnostic."),(0,n.kt)("p",null,"A score of 0 means that the column x cannot predict the column y better than a naive baseline model.\nA score of 1 means that the column x can perfectly predict the column y given the model.\nA score between 0 and 1 states the ratio of how much potential predictive power the model achieved compared to the\nbaseline model."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"df")," (",(0,n.kt)("em",{parentName:"p"},"pandas.DataFrame"),") \u2013 Dataframe that contains the columns x and y")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"x")," (",(0,n.kt)("em",{parentName:"p"},"str"),") \u2013 Name of the column x which acts as the feature")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"y")," (",(0,n.kt)("em",{parentName:"p"},"str"),") \u2013 Name of the column y which acts as the target")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"sample")," (int or None) \u2013 Number of rows for sampling. The sampling decreases the calculation time of the PPS.\nIf None there will be no sampling.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"cross_validation")," (",(0,n.kt)("em",{parentName:"p"},"int"),") \u2013 Number of iterations during cross-validation. This has the following implications:\nFor example, if the number is 4, then it is possible to detect patterns when there are at least 4 times the same"),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"observation. If the limit is increased, the required minimum observations also increase. This is important,\nbecause this is the limit when sklearn will throw an error and the PPS cannot be calculated"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"random_seed")," (int or None) \u2013 Random seed for the parts of the calculation that require random numbers, e.g. shuffling or sampling.\nIf the value is set, the results will be reproducible. If the value is None a new random number is drawn at\nthe start of each calculation.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"invalid_score")," (",(0,n.kt)("em",{parentName:"p"},"any"),") \u2013 The score that is returned when a calculation is invalid, e.g. because the data type was not supported.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"catch_errors")," (",(0,n.kt)("em",{parentName:"p"},"bool"),") \u2013 If True all errors will be catched and reported as unknown_error which ensures convenience. If False\nerrors will be raised. This is helpful for inspecting and debugging errors.")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("p",{parentName:"li"},"  A dict that contains multiple fields about the resulting PPS.\nThe dict enables introspection into the calculations that have been performed under the hood")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Return type")),(0,n.kt)("p",{parentName:"li"},"  Dict"))),(0,n.kt)("h2",{id:"deepchecksversion-module"},"deepchecks.version module"),(0,n.kt)("p",null,"the installed package Version."),(0,n.kt)("h2",{id:"module-contents"},"Module contents"),(0,n.kt)("p",null,"Top module for deepchecks library."))}k.isMDXComponent=!0}}]);