"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[897],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),k=r,u=m["".concat(o,".").concat(k)]||m[k]||c[k]||s;return a?n.createElement(u,i(i({ref:t},d),{},{components:a})):n.createElement(u,i({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},857:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),i=["components"],l={},o="deepchecks.checks.methodology package",p={unversionedId:"api-reference/deepchecks.checks.methodology",id:"api-reference/deepchecks.checks.methodology",isDocsHomePage:!1,title:"deepchecks.checks.methodology package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.checks.methodology.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.checks.methodology",permalink:"/docs/api-reference/deepchecks.checks.methodology",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.checks package",permalink:"/docs/api-reference/deepchecks.checks"},next:{title:"deepchecks.checks.overview package",permalink:"/docs/api-reference/deepchecks.checks.overview"}},d=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.checks.methodology.boosting_overfit module",id:"deepcheckschecksmethodologyboosting_overfit-module",children:[{value:"class BoostingOverfit()",id:"class-boostingoverfit",children:[{value:"__init__(metric: Optional[UnionCallable, str] = None, metric_name: Optionalstr = None, num_steps: int = 20)",id:"__init__metric-optionalunioncallable-str--none-metric_name-optionalstr--none-num_steps-int--20",children:[],level:4},{value:"add_condition_test_score_percent_decline_not_greater_than(threshold: float = 0.05)",id:"add_condition_test_score_percent_decline_not_greater_thanthreshold-float--005",children:[],level:4},{value:"run(train_dataset, test_dataset, model=None)",id:"runtrain_dataset-test_dataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.date_train_test_leakage_duplicates module",id:"deepcheckschecksmethodologydate_train_test_leakage_duplicates-module",children:[{value:"class DateTrainTestLeakageDuplicates()",id:"class-datetraintestleakageduplicates",children:[{value:"__init__(n_to_show: int = 5)",id:"__init__n_to_show-int--5",children:[],level:4},{value:"add_condition_leakage_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_leakage_ratio_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.date_train_test_leakage_overlap module",id:"deepcheckschecksmethodologydate_train_test_leakage_overlap-module",children:[{value:"class DateTrainTestLeakageOverlap()",id:"class-datetraintestleakageoverlap",children:[{value:"add_condition_leakage_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_leakage_ratio_not_greater_thanmax_ratio-float--0-1",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.identifier_leakage module",id:"deepcheckschecksmethodologyidentifier_leakage-module",children:[{value:"class IdentifierLeakage()",id:"class-identifierleakage",children:[{value:"__init__(ppscore_params=None)",id:"__init__ppscore_paramsnone",children:[],level:4},{value:"add_condition_pps_not_greater_than(max_pps: float = 0)",id:"add_condition_pps_not_greater_thanmax_pps-float--0",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model=None)",id:"rundataset-deepchecksbasedatasetdataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.index_leakage module",id:"deepcheckschecksmethodologyindex_leakage-module",children:[{value:"class IndexTrainTestLeakage()",id:"class-indextraintestleakage",children:[{value:"__init__(n_index_to_show: int = 5)",id:"__init__n_index_to_show-int--5",children:[],level:4},{value:"add_condition_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_ratio_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-2",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.performance_overfit module",id:"deepcheckschecksmethodologyperformance_overfit-module",children:[{value:"class TrainTestDifferenceOverfit()",id:"class-traintestdifferenceoverfit",children:[{value:"__init__(alternative_metrics: Optional[Dict[str, Callable[object, pandas.core.frame.DataFrame, str, float]]] = None)",id:"__init__alternative_metrics-optionaldictstr-callableobject-pandascoreframedataframe-str-float--none",children:[],level:4},{value:"add_condition_difference_not_greater_than(threshold: float)",id:"add_condition_difference_not_greater_thanthreshold-float",children:[],level:4},{value:"add_condition_percentage_degradation_not_greater_than(threshold: float = 0.2)",id:"add_condition_percentage_degradation_not_greater_thanthreshold-float--02",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-3",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.single_feature_contribution module",id:"deepcheckschecksmethodologysingle_feature_contribution-module",children:[{value:"class SingleFeatureContribution()",id:"class-singlefeaturecontribution",children:[{value:"__init__(ppscore_params=None, n_show_top: int = 5)",id:"__init__ppscore_paramsnone-n_show_top-int--5",children:[],level:4},{value:"add_condition_feature_pps_not_greater_than(threshold: float = 0.8)",id:"add_condition_feature_pps_not_greater_thanthreshold-float--08",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model=None)",id:"rundataset-deepchecksbasedatasetdataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.single_feature_contribution_train_validation module",id:"deepcheckschecksmethodologysingle_feature_contribution_train_validation-module",children:[{value:"class SingleFeatureContributionTrainTest()",id:"class-singlefeaturecontributiontraintest",children:[{value:"__init__(ppscore_params=None, n_show_top: int = 5)",id:"__init__ppscore_paramsnone-n_show_top-int--5-1",children:[],level:4},{value:"add_condition_feature_pps_difference_not_greater_than(threshold: float = 0.2)",id:"add_condition_feature_pps_difference_not_greater_thanthreshold-float--02",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-4",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.train_test_samples_mix module",id:"deepcheckschecksmethodologytrain_test_samples_mix-module",children:[{value:"class TrainTestSamplesMix()",id:"class-traintestsamplesmix",children:[{value:"add_condition_duplicates_ratio_not_greater_than(max_ratio: float = 0.1)",id:"add_condition_duplicates_ratio_not_greater_thanmax_ratio-float--01",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-5",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.methodology.unused_features module",id:"deepcheckschecksmethodologyunused_features-module",children:[{value:"class UnusedFeatures()",id:"class-unusedfeatures",children:[{value:"__init__(feature_importance_threshold: float = 0.2, feature_variance_threshold: float = 0.4, n_top_fi_to_show: int = 5, n_top_unused_to_show: int = 15, random_state: int = 42)",id:"__init__feature_importance_threshold-float--02-feature_variance_threshold-float--04-n_top_fi_to_show-int--5-n_top_unused_to_show-int--15-random_state-int--42",children:[],level:4},{value:"add_condition_number_of_high_variance_unused_features_not_greater_than(max_high_variance_unused_features: int = 5)",id:"add_condition_number_of_high_variance_unused_features_not_greater_thanmax_high_variance_unused_features-int--5",children:[],level:4},{value:"run(train_dataset: Optionaldeepchecks.base.dataset.Dataset = None, test_dataset: Optionaldeepchecks.base.dataset.Dataset = None, model=None)",id:"runtrain_dataset-optionaldeepchecksbasedatasetdataset--none-test_dataset-optionaldeepchecksbasedatasetdataset--none-modelnone",children:[],level:4}],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],c={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"deepcheckschecksmethodology-package"},"deepchecks.checks.methodology package"),(0,s.kt)("h2",{id:"submodules"},"Submodules"),(0,s.kt)("h2",{id:"deepcheckschecksmethodologyboosting_overfit-module"},"deepchecks.checks.methodology.boosting_overfit module"),(0,s.kt)("p",null,"Boosting overfit check module."),(0,s.kt)("h3",{id:"class-boostingoverfit"},"class BoostingOverfit()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Check for overfit occurring when increasing the number of iterations in boosting models."),(0,s.kt)("p",null,"The check runs a pred-defined number of steps, and in each step it limits the boosting model to use up to X\nestimators (number of estimators is monotonic increasing). It plots the given metric calculated for each step for\nboth the train dataset and the test dataset."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"metric")," (",(0,s.kt)("em",{parentName:"p"},"Union",(0,s.kt)("strong",{parentName:"em"},"["),"Callable",(0,s.kt)("strong",{parentName:"em"},", "),"str**]"),") \u2013 Metric to use verify the model, either function or sklearn scorer name.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"metric_name")," (",(0,s.kt)("em",{parentName:"p"},"str"),") \u2013 Name to be displayed in the plot on y-axis. must be used together with \u2018metric\u2019")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"num_steps")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Number of splits of the model iterations to check."))))),(0,s.kt)("h4",{id:"__init__metric-optionalunioncallable-str--none-metric_name-optionalstr--none-num_steps-int--20"},"_","_init__(metric: Optional[Union","[Callable, str]","] = None, metric_name: Optional","[str]"," = None, num_steps: int = 20)"),(0,s.kt)("h4",{id:"add_condition_test_score_percent_decline_not_greater_thanthreshold-float--005"},"add_condition_test_score_percent_decline_not_greater_than(threshold: float = 0.05)"),(0,s.kt)("p",null,"Add condition."),(0,s.kt)("p",null,"Percent of decline between the maximal score achieved in any boosting iteration and the score achieved in the\nlast iteration (\u201cregular\u201d model score) is not above given threshold."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"threshold")," (",(0,s.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum percentage decline allowed (value 0 and above)"))),(0,s.kt)("h4",{id:"runtrain_dataset-test_dataset-modelnone"},"run(train_dataset, test_dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 ")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 ")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 Boosting model.")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  The metric value on the test dataset."))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologydate_train_test_leakage_duplicates-module"},"deepchecks.checks.methodology.date_train_test_leakage_duplicates module"),(0,s.kt)("p",null,"The date_leakage check module."),(0,s.kt)("h3",{id:"class-datetraintestleakageduplicates"},"class DateTrainTestLeakageDuplicates()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Check if test dates are present in train data."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"n_to_show")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Number of common dates to show."))),(0,s.kt)("h4",{id:"__init__n_to_show-int--5"},"_","_init__(n_to_show: int = 5)"),(0,s.kt)("h4",{id:"add_condition_leakage_ratio_not_greater_thanmax_ratio-float--0"},"add_condition_leakage_ratio_not_greater_than(max_ratio: float = 0)"),(0,s.kt)("p",null,"Add condition - require leakage ratio to not surpass max_ratio."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum ratio of leakage."))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain an date.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain an date.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"value is the ratio of date leakage.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"data is html display of the checks\u2019 textual result.")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If one of the datasets is not a Dataset instance with an date"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologydate_train_test_leakage_overlap-module"},"deepchecks.checks.methodology.date_train_test_leakage_overlap module"),(0,s.kt)("p",null,"The date_leakage check module."),(0,s.kt)("h3",{id:"class-datetraintestleakageoverlap"},"class DateTrainTestLeakageOverlap()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Check test data that is dated earlier than latest date in train."),(0,s.kt)("h4",{id:"add_condition_leakage_ratio_not_greater_thanmax_ratio-float--0-1"},"add_condition_leakage_ratio_not_greater_than(max_ratio: float = 0)"),(0,s.kt)("p",null,"Add condition - require leakage ratio to not surpass max_ratio."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum ratio of leakage."))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-1"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain an date column.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain an date column.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"value is the ratio of date leakage.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"data is html display of the checks\u2019 textual result.")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If one of the datasets is not a Dataset instance with an date"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologyidentifier_leakage-module"},"deepchecks.checks.methodology.identifier_leakage module"),(0,s.kt)("p",null,"module contains Identifier Leakage check."),(0,s.kt)("h3",{id:"class-identifierleakage"},"class IdentifierLeakage()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,s.kt)("p",null,"Check if identifiers (Index/Date) can be used to predict the label."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"ppscore_params")," \u2013 dictionary containing params to pass to ppscore predictor"))),(0,s.kt)("h4",{id:"__init__ppscore_paramsnone"},"_","_init__(ppscore_params=None)"),(0,s.kt)("h4",{id:"add_condition_pps_not_greater_thanmax_pps-float--0"},"add_condition_pps_not_greater_than(max_pps: float = 0)"),(0,s.kt)("p",null,"Add condition - require columns not to have a greater pps than given max."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_pps")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum allowed string length outliers ratio."))),(0,s.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-modelnone"},"run(dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 any dataset.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 ignored in check (default: None).")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is a dictionary with PPS per feature column.\ndata is a bar graph of the PPS of each feature.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  (CheckResult)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologyindex_leakage-module"},"deepchecks.checks.methodology.index_leakage module"),(0,s.kt)("p",null,"The index_leakage check module."),(0,s.kt)("h3",{id:"class-indextraintestleakage"},"class IndexTrainTestLeakage()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Check if test indexes are present in train data."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"n_index_to_show")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Number of common indexes to show."))),(0,s.kt)("h4",{id:"__init__n_index_to_show-int--5"},"_","_init__(n_index_to_show: int = 5)"),(0,s.kt)("h4",{id:"add_condition_ratio_not_greater_thanmax_ratio-float--0"},"add_condition_ratio_not_greater_than(max_ratio: float = 0)"),(0,s.kt)("p",null,"Add condition - require index leakage ratio to not surpass max_ratio."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,s.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum ratio of index leakage."))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-2"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain an index.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain an index.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"value is the ratio of index leakage.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"data is html display of the checks\u2019 textual result.")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the if one of the datasets is not a Dataset instance with an index"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologyperformance_overfit-module"},"deepchecks.checks.methodology.performance_overfit module"),(0,s.kt)("p",null,"The train_validation_difference_overfit check module."),(0,s.kt)("h3",{id:"class-traintestdifferenceoverfit"},"class TrainTestDifferenceOverfit()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Visualize overfit by displaying the difference between model metrics on train and on test data."),(0,s.kt)("p",null,"The check would display the selected metrics for the training and test data, helping the user visualize\nthe difference in performance between the two datasets. If no alternative_metrics are supplied, the check would\nuse a list of default metrics. If they are supplied, alternative_metrics must be a dictionary, with the keys\nbeing metric names and the values being either a name of an sklearn scoring function\n(",(0,s.kt)("a",{parentName:"p",href:"https://scikit-learn.org/stable/modules/model_evaluation.html#scoring"},"https://scikit-learn.org/stable/modules/model_evaluation.html#scoring"),") or an sklearn scoring function."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"alternative_metrics")," (",(0,s.kt)("em",{parentName:"p"},"Dict",(0,s.kt)("strong",{parentName:"em"},"["),"str",(0,s.kt)("strong",{parentName:"em"},", "),"Callable**]"),") \u2013 An optional dictionary of metric name or scorer functions"))),(0,s.kt)("h4",{id:"__init__alternative_metrics-optionaldictstr-callableobject-pandascoreframedataframe-str-float--none"},"_","_init__(alternative_metrics: Optional[Dict[str, Callable[","[object, pandas.core.frame.DataFrame, str]",", float]]] = None)"),(0,s.kt)("h4",{id:"add_condition_difference_not_greater_thanthreshold-float"},"add_condition_difference_not_greater_than(threshold: float)"),(0,s.kt)("p",null,"Add new condition."),(0,s.kt)("p",null,"Add condition that will check that difference between train dataset metrics and test\ndataset metrics is not greater than X."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"threshold")," \u2013 metrics difference upper bound"))),(0,s.kt)("h4",{id:"add_condition_percentage_degradation_not_greater_thanthreshold-float--02"},"add_condition_percentage_degradation_not_greater_than(threshold: float = 0.2)"),(0,s.kt)("p",null,"Add new condition."),(0,s.kt)("p",null,"Add condition that will check that train performance is not degraded by more than given percentage in test."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"threshold")," \u2013 maximum percentage degradation allowed (value between 0 to 1)"))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-3"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain a label column.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain a label column.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 A scikit-learn-compatible fitted estimator instance")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is a dataframe with metrics as indexes, and scores per training and test in the columns.\ndata is a bar graph of the metrics for training and test data.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If either of the dataset objects are not a Dataset instance with a label"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologysingle_feature_contribution-module"},"deepchecks.checks.methodology.single_feature_contribution module"),(0,s.kt)("p",null,"The single_feature_contribution check module."),(0,s.kt)("h3",{id:"class-singlefeaturecontribution"},"class SingleFeatureContribution()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,s.kt)("p",null,"Return the PPS (Predictive Power Score) of all features in relation to the label."),(0,s.kt)("p",null,"The PPS represents the ability of a feature to single-handedly predict another feature or label.\nA high PPS (close to 1) can mean that this feature\u2019s success in predicting the label is actually due to data\nleakage - meaning that the feature holds information that is based on the label to begin with."),(0,s.kt)("p",null,"Uses the ppscore package - for more info, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/8080labs/ppscore"},"https://github.com/8080labs/ppscore")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"ppscore_params")," (",(0,s.kt)("em",{parentName:"p"},"dict"),") \u2013 dictionary of additional parameters for the ppscore.predictors function"))),(0,s.kt)("h4",{id:"__init__ppscore_paramsnone-n_show_top-int--5"},"_","_init__(ppscore_params=None, n_show_top: int = 5)"),(0,s.kt)("h4",{id:"add_condition_feature_pps_not_greater_thanthreshold-float--08"},"add_condition_feature_pps_not_greater_than(threshold: float = 0.8)"),(0,s.kt)("p",null,"Add condition that will check that pps of the specified feature(s) is not greater than X."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"threshold")," \u2013 pps upper bound"))),(0,s.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-modelnone-1"},"run(dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"dataset")," \u2013 Dataset - The dataset object")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is a dictionary with PPS per feature column.\ndata is a bar graph of the PPS of each feature.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologysingle_feature_contribution_train_validation-module"},"deepchecks.checks.methodology.single_feature_contribution_train_validation module"),(0,s.kt)("p",null,"The single_feature_contribution check module."),(0,s.kt)("h3",{id:"class-singlefeaturecontributiontraintest"},"class SingleFeatureContributionTrainTest()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Return the difference in PPS (Predictive Power Score) of all features between train and test datasets."),(0,s.kt)("p",null,"The PPS represents the ability of a feature to single-handedly predict another feature or label.\nA high PPS (close to 1) can mean that this feature\u2019s success in predicting the label is actually due to data\nleakage - meaning that the feature holds information that is based on the label to begin with."),(0,s.kt)("p",null,"When we compare train PPS to test PPS, A high difference can strongly indicate leakage,\nas a feature that was \u201cpowerful\u201d in train but not in test can be explained by leakage in train that does"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"not affect a new dataset.")),(0,s.kt)("p",null,"Uses the ppscore package - for more info, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/8080labs/ppscore"},"https://github.com/8080labs/ppscore")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"ppscore_params")," (",(0,s.kt)("em",{parentName:"p"},"dict"),") \u2013 dictionary of additional parameters for the ppscore predictor function")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"n_show_top")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Number of features to show, sorted by the magnitude of difference in PPS"))))),(0,s.kt)("h4",{id:"__init__ppscore_paramsnone-n_show_top-int--5-1"},"_","_init__(ppscore_params=None, n_show_top: int = 5)"),(0,s.kt)("h4",{id:"add_condition_feature_pps_difference_not_greater_thanthreshold-float--02"},"add_condition_feature_pps_difference_not_greater_than(threshold: float = 0.2)"),(0,s.kt)("p",null,"Add new condition."),(0,s.kt)("p",null,"Add condition that will check that difference between train\ndataset feature pps and test dataset feature pps is not greater than X."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"threshold")," \u2013 train test ps difference upper bound"))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-4"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is a dictionary with PPS difference per feature column.\ndata is a bar graph of the PPS of each feature.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance with a label"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologytrain_test_samples_mix-module"},"deepchecks.checks.methodology.train_test_samples_mix module"),(0,s.kt)("p",null,"The data_sample_leakage_report check module."),(0,s.kt)("h3",{id:"class-traintestsamplesmix"},"class TrainTestSamplesMix()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Detect samples in the test data that appear also in training data."),(0,s.kt)("h4",{id:"add_condition_duplicates_ratio_not_greater_thanmax_ratio-float--01"},"add_condition_duplicates_ratio_not_greater_than(max_ratio: float = 0.1)"),(0,s.kt)("p",null,"Add condition - require max allowed ratio of test data samples to appear in train data."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,s.kt)("em",{parentName:"p"},"float"),") \u2013 Max allowed ratio of test data samples to appear in train data"))),(0,s.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-5"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain an index.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain an index.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"(**"),")*",(0,s.kt)("em",{parentName:"p"}," ("),"model*) \u2013 any = None - not used in the check")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is sample leakage ratio in %,\ndisplays a dataframe that shows the duplicated rows between the datasets")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset instance"))),(0,s.kt)("h2",{id:"deepcheckschecksmethodologyunused_features-module"},"deepchecks.checks.methodology.unused_features module"),(0,s.kt)("p",null,"The UnusedFeatures check module."),(0,s.kt)("h3",{id:"class-unusedfeatures"},"class UnusedFeatures()"),(0,s.kt)("p",null,"Bases: ",(0,s.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,s.kt)("p",null,"Detect features that are nearly unused by the model."),(0,s.kt)("p",null,"The check uses feature importance (either internally computed in appropriate models or calculated by permutation\nfeature importance) to detect features that are not used by the model. From this list, the check sorts the features\nby their variance (as calculated by a PCA transformation). High variance unused features may be containing"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"information that is ignored by the model.")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"feature_importance_threshold")," (",(0,s.kt)("em",{parentName:"p"},"float"),") \u2013 A cutoff value for the feature importance, measured by the ratio of\neach features\u2019 feature importance to the mean feature importance. Features with lower importance\nare not shown in the check display.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"feature_variance_threshold")," (",(0,s.kt)("em",{parentName:"p"},"float"),") \u2013 A cutoff value for the feature variance, measured by the ratio of\neach features\u2019 feature importance to the mean feature importance. Unused features with lower variance\nare not shown in the check display.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"n_top_fi_to_show")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 The max number of important features to show in the check display.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"n_top_unused_to_show")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 The max number of unused features to show in the check display, from among\nunused features that have higher variance then is defined by feature_variance_threshold.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"random_state")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 The random state to use for permutation feature importance and PCA."))))),(0,s.kt)("h4",{id:"__init__feature_importance_threshold-float--02-feature_variance_threshold-float--04-n_top_fi_to_show-int--5-n_top_unused_to_show-int--15-random_state-int--42"},"_","_init__(feature_importance_threshold: float = 0.2, feature_variance_threshold: float = 0.4, n_top_fi_to_show: int = 5, n_top_unused_to_show: int = 15, random_state: int = 42)"),(0,s.kt)("h4",{id:"add_condition_number_of_high_variance_unused_features_not_greater_thanmax_high_variance_unused_features-int--5"},"add_condition_number_of_high_variance_unused_features_not_greater_than(max_high_variance_unused_features: int = 5)"),(0,s.kt)("p",null,"Add condition - require number of high variance unused features to be not greater than a given number."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"max_high_variance_unused_features")," (",(0,s.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum allowed number of high variance unused features."))),(0,s.kt)("h4",{id:"runtrain_dataset-optionaldeepchecksbasedatasetdataset--none-test_dataset-optionaldeepchecksbasedatasetdataset--none-modelnone"},"run(train_dataset: Optional","[deepchecks.base.dataset.Dataset]"," = None, test_dataset: Optional","[deepchecks.base.dataset.Dataset]"," = None, model=None)"),(0,s.kt)("p",null,"Run check."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Parameters")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain a label column. If test_dataset is not\nsupplied this dataset will be used.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,s.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain a label column. Will be used if supplied.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"model")," \u2013 A scikit-learn-compatible fitted estimator instance")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Returns")),(0,s.kt)("p",{parentName:"li"},"  value is a dataframe with metrics as indexes, and scores per training and test in the columns.\ndisplay data is a bar graph of the metrics for training and test data.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Return type")),(0,s.kt)("p",{parentName:"li"},"  CheckResult")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Raises")),(0,s.kt)("p",{parentName:"li"},"  ",(0,s.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If neither train_dataset nor test_dataset exist, or either of the dataset objects are\nnot a Dataset instance with a label."))),(0,s.kt)("h2",{id:"module-contents"},"Module contents"),(0,s.kt)("p",null,"Module contains checks for methodological flaws in the model building process."))}m.isMDXComponent=!0}}]);