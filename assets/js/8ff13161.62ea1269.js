"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[857],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,_=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(_,o(o({ref:t},m),{},{components:n})):a.createElement(_,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="deepchecks.checks.integrity package",p={unversionedId:"api-reference/deepchecks.checks.integrity",id:"api-reference/deepchecks.checks.integrity",isDocsHomePage:!1,title:"deepchecks.checks.integrity package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.checks.integrity.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.checks.integrity",permalink:"/docs/api-reference/deepchecks.checks.integrity",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.checks.distribution package",permalink:"/docs/api-reference/deepchecks.checks.distribution"},next:{title:"deepchecks.checks package",permalink:"/docs/api-reference/deepchecks.checks"}},m=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.checks.integrity.data_duplicates module",id:"deepcheckschecksintegritydata_duplicates-module",children:[{value:"class DataDuplicates()",id:"class-dataduplicates",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_to_show: int = 5)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_to_show-int--5",children:[],level:4},{value:"add_condition_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_ratio_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model=None)",id:"rundataset-deepchecksbasedatasetdataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.dominant_frequency_change module",id:"deepcheckschecksintegritydominant_frequency_change-module",children:[{value:"class DominantFrequencyChange()",id:"class-dominantfrequencychange",children:[{value:"__init__(dominance_ratio: float = 2, ratio_change_thres: float = 1.5, n_top_columns: int = 10)",id:"__init__dominance_ratio-float--2-ratio_change_thres-float--15-n_top_columns-int--10",children:[],level:4},{value:"add_condition_p_value_not_less_than(p_value_threshold: float = 0.0001)",id:"add_condition_p_value_not_less_thanp_value_threshold-float--00001",children:[],level:4},{value:"add_condition_ratio_of_change_not_more_than(percent_change_threshold: float = 0.25)",id:"add_condition_ratio_of_change_not_more_thanpercent_change_threshold-float--025",children:[],level:4},{value:"run(dataset, baseline_dataset, model=None)",id:"rundataset-baseline_dataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.is_single_value module",id:"deepcheckschecksintegrityis_single_value-module",children:[{value:"class IsSingleValue()",id:"class-issinglevalue",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none",children:[],level:4},{value:"add_condition_not_single_value()",id:"add_condition_not_single_value",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.label_ambiguity module",id:"deepcheckschecksintegritylabel_ambiguity-module",children:[{value:"class LabelAmbiguity()",id:"class-labelambiguity",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_to_show: int = 5)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_to_show-int--5-1",children:[],level:4},{value:"add_condition_ambiguous_sample_ratio_not_greater_than(max_ratio=0)",id:"add_condition_ambiguous_sample_ratio_not_greater_thanmax_ratio0",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model=None)",id:"rundataset-deepchecksbasedatasetdataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.mixed_nulls module",id:"deepcheckschecksintegritymixed_nulls-module",children:[{value:"class MixedNulls()",id:"class-mixednulls",children:[{value:"__init__(null_string_list: Optional[Iterablestr] = None, check_nan: bool = True, columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_top_columns: int = 10)",id:"__init__null_string_list-optionaliterablestr--none-check_nan-bool--true-columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10",children:[],level:4},{value:"add_condition_different_nulls_not_more_than(max_allowed_null_types: int = 1)",id:"add_condition_different_nulls_not_more_thanmax_allowed_null_types-int--1",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.mixed_types module",id:"deepcheckschecksintegritymixed_types-module",children:[{value:"class MixedTypes()",id:"class-mixedtypes",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10",children:[],level:4},{value:"add_condition_rare_type_ratio_not_less_than(max_rare_type_ratio: float = 0.01)",id:"add_condition_rare_type_ratio_not_less_thanmax_rare_type_ratio-float--001",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone-2",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.new_category module",id:"deepcheckschecksintegritynew_category-module",children:[{value:"class CategoryMismatchTrainTest()",id:"class-categorymismatchtraintest",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-1",children:[],level:4},{value:"add_condition_new_categories_not_greater_than(max_new: int = 0)",id:"add_condition_new_categories_not_greater_thanmax_new-int--0",children:[],level:4},{value:"add_condition_new_category_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_new_category_ratio_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.new_label module",id:"deepcheckschecksintegritynew_label-module",children:[{value:"class NewLabelTrainTest()",id:"class-newlabeltraintest",children:[{value:"add_condition_new_label_ratio_not_greater_than(max_ratio: float = 0)",id:"add_condition_new_label_ratio_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"add_condition_new_labels_not_greater_than(max_new: int = 0)",id:"add_condition_new_labels_not_greater_thanmax_new-int--0",children:[],level:4},{value:"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)",id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.rare_format_detection module",id:"deepcheckschecksintegrityrare_format_detection-module",children:[{value:"class Pattern()",id:"class-pattern",children:[{value:"__init__(name: str, substituters: Union[List[Tuplestr, str], Tuplestr, str], ignore: Optionalstr = None, refine: bool = False, is_sequence: bool = False)",id:"__init__name-str-substituters-unionlisttuplestr-str-tuplestr-str-ignore-optionalstr--none-refine-bool--false-is_sequence-bool--false",children:[],level:4},{value:"__repr__()",id:"__repr__",children:[],level:4},{value:"clean(s: str)",id:"cleans-str",children:[],level:4},{value:"is_format_significant(fmt)",id:"is_format_significantfmt",children:[],level:4},{value:"sub(s: str)",id:"subs-str",children:[],level:4}],level:3},{value:"class RareFormatDetection()",id:"class-rareformatdetection",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, patterns: Optional[Listdeepchecks.checks.integrity.rare_format_detection.Pattern] = None, rarity_threshold: float = 0.05, min_unique_common_ratio: float = 0.01, pattern_match_method: str = &#39;first&#39;, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-patterns-optionallistdeepcheckschecksintegrityrare_format_detectionpattern--none-rarity_threshold-float--005-min_unique_common_ratio-float--001-pattern_match_method-str--first-n_top_columns-int--10",children:[],level:4},{value:"add_condition_ratio_of_rare_formats_not_greater_than(var: float = 0)",id:"add_condition_ratio_of_rare_formats_not_greater_thanvar-float--0",children:[],level:4},{value:"run(dataset: deepchecks.base.dataset.Dataset, model=None)",id:"rundataset-deepchecksbasedatasetdataset-modelnone-2",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.special_chars module",id:"deepcheckschecksintegrityspecial_chars-module",children:[{value:"class SpecialCharacters()",id:"class-specialcharacters",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_most_common: int = 2, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_most_common-int--2-n_top_columns-int--10",children:[],level:4},{value:"add_condition_ratio_of_special_characters_not_grater_than(max_ratio: float = 0.001)",id:"add_condition_ratio_of_special_characters_not_grater_thanmax_ratio-float--0001",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone-3",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.string_length_out_of_bounds module",id:"deepcheckschecksintegritystring_length_out_of_bounds-module",children:[{value:"class StringLengthOutOfBounds()",id:"class-stringlengthoutofbounds",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, num_percentiles: int = 1000, inner_quantile_range: int = 94, outlier_factor: int = 4, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-num_percentiles-int--1000-inner_quantile_range-int--94-outlier_factor-int--4-n_top_columns-int--10",children:[],level:4},{value:"add_condition_number_of_outliers_not_greater_than(max_outliers: int = 0)",id:"add_condition_number_of_outliers_not_greater_thanmax_outliers-int--0",children:[],level:4},{value:"add_condition_ratio_of_outliers_not_greater_than(max_ratio: float = 0)",id:"add_condition_ratio_of_outliers_not_greater_thanmax_ratio-float--0",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone-4",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.string_mismatch module",id:"deepcheckschecksintegritystring_mismatch-module",children:[{value:"class StringMismatch()",id:"class-stringmismatch",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10-1",children:[],level:4},{value:"add_condition_no_variants()",id:"add_condition_no_variants",children:[],level:4},{value:"add_condition_not_more_variants_than(num_max_variants: int)",id:"add_condition_not_more_variants_thannum_max_variants-int",children:[],level:4},{value:"add_condition_ratio_variants_not_more_than(max_ratio: float = 0.01)",id:"add_condition_ratio_variants_not_more_thanmax_ratio-float--001",children:[],level:4},{value:"run(dataset, model=None)",id:"rundataset-modelnone-5",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.integrity.string_mismatch_comparison module",id:"deepcheckschecksintegritystring_mismatch_comparison-module",children:[{value:"class StringMismatchComparison()",id:"class-stringmismatchcomparison",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_top_columns: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10-2",children:[],level:4},{value:"add_condition_no_new_variants()",id:"add_condition_no_new_variants",children:[],level:4},{value:"add_condition_ratio_new_variants_not_more_than(ratio: float)",id:"add_condition_ratio_new_variants_not_more_thanratio-float",children:[],level:4},{value:"run(dataset, baseline_dataset, model=None)",id:"rundataset-baseline_dataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deepcheckschecksintegrity-package"},"deepchecks.checks.integrity package"),(0,i.kt)("h2",{id:"submodules"},"Submodules"),(0,i.kt)("h2",{id:"deepcheckschecksintegritydata_duplicates-module"},"deepchecks.checks.integrity.data_duplicates module"),(0,i.kt)("p",null,"module contains Data Duplicates check."),(0,i.kt)("h3",{id:"class-dataduplicates"},"class DataDuplicates()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Search for duplicate data in dataset."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 List of columns to check, if none given checks all columns Except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 List of columns to ignore, if none given checks based on columns\nvariable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_to_show")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 number of most common duplicated samples to show."))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_to_show-int--5"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_to_show: int = 5)"),(0,i.kt)("h4",{id:"add_condition_ratio_not_greater_thanmax_ratio-float--0"},"add_condition_ratio_not_greater_than(max_ratio: float = 0)"),(0,i.kt)("p",null,"Add condition - require duplicate ratio to not surpass max_ratio."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum ratio of duplicates."))),(0,i.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-modelnone"},"run(dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 any dataset.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  percentage of duplicates and display of the top n_to_show most duplicated.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (CheckResult)"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritydominant_frequency_change-module"},"deepchecks.checks.integrity.dominant_frequency_change module"),(0,i.kt)("p",null,"module contains Dominant Frequency Change check."),(0,i.kt)("h3",{id:"class-dominantfrequencychange"},"class DominantFrequencyChange()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.CompareDatasetsBaseCheck")),(0,i.kt)("p",null,"Check if dominant values have increased significantly between test and reference data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dominance_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float = 2"),") \u2013 Next most abundant value has to be THIS times less than the first (0-inf).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ratio_change_thres")," (",(0,i.kt)("em",{parentName:"p"},"float = 1.5"),") \u2013 The dominant frequency has to change by at least this ratio (0-inf).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optional - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__dominance_ratio-float--2-ratio_change_thres-float--15-n_top_columns-int--10"},"_","_init__(dominance_ratio: float = 2, ratio_change_thres: float = 1.5, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_p_value_not_less_thanp_value_threshold-float--00001"},"add_condition_p_value_not_less_than(p_value_threshold: float = 0.0001)"),(0,i.kt)("p",null,"Add condition - require min p value allowed per column."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"p_value_threshold")," (",(0,i.kt)("em",{parentName:"p"},"float = 0.0001"),") \u2013 Minimal p-value to pass the statistical test determining\nif the value abundance has changed significantly (0-1)."))),(0,i.kt)("h4",{id:"add_condition_ratio_of_change_not_more_thanpercent_change_threshold-float--025"},"add_condition_ratio_of_change_not_more_than(percent_change_threshold: float = 0.25)"),(0,i.kt)("p",null,"Add condition - require change in the ratio of the dominant value to be below the threshold."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"percent_change_threshold")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 The maximal change in the ratio out of data between training data and\ntest data that the dominant value is allowed to change"))),(0,i.kt)("h4",{id:"rundataset-baseline_dataset-modelnone"},"run(dataset, baseline_dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain an index.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"baseline_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The baseline dataset object. Must contain an index.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Detects values highly represented in the tested and reference data and checks if their..\nrelative and absolute percentage have increased significantly and makes a report.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset or DataFrame instance"))),(0,i.kt)("h2",{id:"deepcheckschecksintegrityis_single_value-module"},"deepchecks.checks.integrity.is_single_value module"),(0,i.kt)("p",null,"Module contains is_single_value check."),(0,i.kt)("h3",{id:"class-issinglevalue"},"class IsSingleValue()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Check if there are columns which have only a single unique value in all rows."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ones.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"variable.")," \u2013 "))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None)"),(0,i.kt)("h4",{id:"add_condition_not_single_value"},"add_condition_not_single_value()"),(0,i.kt)("p",null,"Add condition - not single value."),(0,i.kt)("h4",{id:"rundataset-modelnone"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 A Dataset object or a pd.DataFrame")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  value is a boolean if there was at least one column with only one unique,\ndisplay is a series with columns that have only one unique")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritylabel_ambiguity-module"},"deepchecks.checks.integrity.label_ambiguity module"),(0,i.kt)("p",null,"module contains Data Duplicates check."),(0,i.kt)("h3",{id:"class-labelambiguity"},"class LabelAmbiguity()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Find samples with multiple labels."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 List of columns to check, if none given checks all columns Except ignored")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ones.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 List of columns to ignore, if none given checks based on columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"variable.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_to_show")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 number of most common ambiguous samples to show."))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_to_show-int--5-1"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_to_show: int = 5)"),(0,i.kt)("h4",{id:"add_condition_ambiguous_sample_ratio_not_greater_thanmax_ratio0"},"add_condition_ambiguous_sample_ratio_not_greater_than(max_ratio=0)"),(0,i.kt)("p",null,"Add condition - require samples with multiple labels to not be more than max_ratio."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum ratio of samples with multiple labels."))),(0,i.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-modelnone-1"},"run(dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 any dataset.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  percentage of ambiguous samples and display of the top n_to_show most ambiguous.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (CheckResult)"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritymixed_nulls-module"},"deepchecks.checks.integrity.mixed_nulls module"),(0,i.kt)("p",null,"Module contains Mixed Nulls check."),(0,i.kt)("h3",{id:"class-mixednulls"},"class MixedNulls()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Search for various types of null values in a string column(s), including string representations of null."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"null_string_list")," (",(0,i.kt)("em",{parentName:"p"},"List",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 List of strings to be considered alternative null representations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"check_nan")," (",(0,i.kt)("em",{parentName:"p"},"bool"),") \u2013 Whether to add to null list to check also NaN values")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns\nvariable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__null_string_list-optionaliterablestr--none-check_nan-bool--true-columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10"},"_","_init__(null_string_list: Optional[Iterable","[str]","] = None, check_nan: bool = True, columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_different_nulls_not_more_thanmax_allowed_null_types-int--1"},"add_condition_different_nulls_not_more_than(max_allowed_null_types: int = 1)"),(0,i.kt)("p",null,"Add condition - require column not to have more than given number of different null values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_allowed_null_types")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of different null value types which is the maximum allowed."))),(0,i.kt)("h4",{id:"rundataset-modelnone-1"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  DataFrame with columns (\u2018Column Name\u2019, \u2018Value\u2019, \u2018Count\u2019, \u2018Percentage\u2019) for any column which\nhave more than 1 null values.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (CheckResult)"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritymixed_types-module"},"deepchecks.checks.integrity.mixed_types module"),(0,i.kt)("p",null,"module contains Mixed Types check."),(0,i.kt)("h3",{id:"class-mixedtypes"},"class MixedTypes()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Search for various types of data in (a) column","[s]",", including hidden mixes in strings."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns\nvariable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_rare_type_ratio_not_less_thanmax_rare_type_ratio-float--001"},"add_condition_rare_type_ratio_not_less_than(max_rare_type_ratio: float = 0.01)"),(0,i.kt)("p",null,"Add condition - Whether the rarer data type (strings or numbers) have ratio higher than given ratio."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_rare_type_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Minimal ratio allowed for the rarer type (numbers or strings)"))),(0,i.kt)("h4",{id:"rundataset-modelnone-2"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 Dataset to be tested.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 Model is ignored for this check.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  DataFrame with rows (\u2018strings\u2019, \u2018numbers\u2019) for any column with mixed types.\nnumbers will also include hidden numbers in string representation.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (CheckResult)"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritynew_category-module"},"deepchecks.checks.integrity.new_category module"),(0,i.kt)("p",null,"The data_sample_leakage_report check module."),(0,i.kt)("h3",{id:"class-categorymismatchtraintest"},"class CategoryMismatchTrainTest()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,i.kt)("p",null,"Find new categories in the test set."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ones.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"variable.")," \u2013 "))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-1"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None)"),(0,i.kt)("h4",{id:"add_condition_new_categories_not_greater_thanmax_new-int--0"},"add_condition_new_categories_not_greater_than(max_new: int = 0)"),(0,i.kt)("p",null,"Add condition - require column not to have greater than given number of different new categories."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_new")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of different categories value types which is the maximum allowed."))),(0,i.kt)("h4",{id:"add_condition_new_category_ratio_not_greater_thanmax_ratio-float--0"},"add_condition_new_category_ratio_not_greater_than(max_ratio: float = 0)"),(0,i.kt)("p",null,"Add condition - require column not to have greater than given number of different new categories."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of different categories value types which is the maximum allowed."))),(0,i.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  value is a dictionary that shows columns with new categories\ndisplays a dataframe that shows columns with new categories")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritynew_label-module"},"deepchecks.checks.integrity.new_label module"),(0,i.kt)("p",null,"The data_sample_leakage_report check module."),(0,i.kt)("h3",{id:"class-newlabeltraintest"},"class NewLabelTrainTest()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,i.kt)("p",null,"Find new labels in test."),(0,i.kt)("h4",{id:"add_condition_new_label_ratio_not_greater_thanmax_ratio-float--0"},"add_condition_new_label_ratio_not_greater_than(max_ratio: float = 0)"),(0,i.kt)("p",null,"Add condition - require label column not to have greater than given number of ratio new label samples."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Ratio of new label samples to total samples which is the maximum allowed."))),(0,i.kt)("h4",{id:"add_condition_new_labels_not_greater_thanmax_new-int--0"},"add_condition_new_labels_not_greater_than(max_new: int = 0)"),(0,i.kt)("p",null,"Add condition - require label column not to have greater than given number of different new labels."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_new")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of different new labels value types which is the maximum allowed."))),(0,i.kt)("h4",{id:"runtrain_dataset-deepchecksbasedatasetdataset-test_dataset-deepchecksbasedatasetdataset-modelnone-1"},"run(train_dataset: deepchecks.base.dataset.Dataset, test_dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 any = None - not used in the check")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  value is a dictionary that shows label column with new labels\ndisplays a dataframe that label columns with new labels")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the datasets are not a Dataset instance or do not contain label column"))),(0,i.kt)("h2",{id:"deepcheckschecksintegrityrare_format_detection-module"},"deepchecks.checks.integrity.rare_format_detection module"),(0,i.kt)("p",null,"The single_feature_contribution check module."),(0,i.kt)("h3",{id:"class-pattern"},"class Pattern()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"Supporting class for creating complicated patterns for rare_format_detection."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"name")," \u2013 name of pattern, will be shown in the results.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"substituters")," \u2013 list of tuples or just a tuple. first argument in the tuple is the regex string, to find\nrelevant patterns. second argument in the tuple is a substring to replace all relevant substrings.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore")," \u2013 regex string indicating which substrings should be ignored (replaced with \u2018\u2019)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"refine")," \u2013 boolean. Indicates whether this pattern should be refined later (see _refine_formats)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"is_sequence")," \u2013 boolean. Indicates whether the substituters are for one characters or for a sequence. Relevant\nonly when refine is True."))))),(0,i.kt)("h4",{id:"__init__name-str-substituters-unionlisttuplestr-str-tuplestr-str-ignore-optionalstr--none-refine-bool--false-is_sequence-bool--false"},"_","_init__(name: str, substituters: Union[List[Tuple","[str, str]","], Tuple","[str, str]","], ignore: Optional","[str]"," = None, refine: bool = False, is_sequence: bool = False)"),(0,i.kt)("h4",{id:"__repr__"},"_","_repr__()"),(0,i.kt)("p",null,"Return string representation."),(0,i.kt)("h4",{id:"cleans-str"},"clean(s: str)"),(0,i.kt)("p",null,"Remove all substrings that should be ignored."),(0,i.kt)("h4",{id:"is_format_significantfmt"},"is_format_significant(fmt)"),(0,i.kt)("p",null,"Return boolean indicating whether format includes any filler."),(0,i.kt)("h4",{id:"subs-str"},"sub(s: str)"),(0,i.kt)("p",null,"Replace matching patterns to the regex_str by the filler."),(0,i.kt)("h3",{id:"class-rareformatdetection"},"class RareFormatDetection()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Checks whether columns have common formats (e.g. \u201cXX-XX-XXXX\u201d for dates\u201d) and detects values that don\u2019t match."),(0,i.kt)("p",null,"Example for a Pattern:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Pattern(name=\u2019digits or letters format\u2019, substituters=(r\u2019[A-Z|a-z|d]\u2019, \u2018X\u2019))\nThis pattern looks for either digits or letters and replaces them with the character \u2018X\u2019. By replacing\nthese, we can find all strings matching this certain pattern and see how common (or rare) it is.\n\nIn this example, the string \u201c[nir123@deepchecks.com](mailto:nir123@deepchecks.com)\u201d would be changed to \u201c[XXXXXX@XXXXXXXXXX.XXX](mailto:XXXXXX@XXXXXXXXXX.XXX)\u201d.\nAll other strings matching this format (e.g. \u201c[noam12@deepchecks.com](mailto:noam12@deepchecks.com)\u201d) would be identified as having the\nsame pattern.\n\nIf we also mark \u201crefine = True\u201d in the Pattern class, the check will further try and make the pattern\nmore accurate, by trying to find common characters in all samples of the same pattern. In this example,\nthe refined format found would be \u201c[XXXXXX@deepchecks.com](mailto:XXXXXX@deepchecks.com).\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns\nvariable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"patterns")," (",(0,i.kt)("em",{parentName:"p"},"List",(0,i.kt)("strong",{parentName:"em"},"["),"Pattern**]"),") \u2013 patterns to look for when comparing common vs. rare formats. Uses DEFAULT_PATTERNS\nif not specified.\nNote that if pattern_match_method=\u2019first\u2019 (which it is by default), then the order of patterns matter.\nIn this case, it is advised to order the patterns from specific to general.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"rarity_threshold")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 threshold to indicate what is considered a \u201csharp\u201d drop in commonness of values.\nThis is used by the function get_rare_vs_common_values which divides data into \u201ccommon\u201d and \u201crare\u201d\nvalues, and is used here to determine which formats are common and which are rare.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"min_unique_common_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 minimum ratio for unique common samples to all common samples.\nThis parameter is used in order to filter unwanted results in the case where the common format is\nactually a common value.\nThis is because if a common format has too few unique values, it\u2019s probably actually just a categorical\nfeature with some values that are very common and some that are rare.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"pattern_match_method")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 \u2018first\u2019 or \u2018all\u2019. If \u2018first\u2019, returns only the pattern where a \u201crare format\u201d\nsample was found for the first time. If \u2018all\u2019, returns all patterns in which anything was found.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optional - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-patterns-optionallistdeepcheckschecksintegrityrare_format_detectionpattern--none-rarity_threshold-float--005-min_unique_common_ratio-float--001-pattern_match_method-str--first-n_top_columns-int--10"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, patterns: Optional[List","[deepchecks.checks.integrity.rare_format_detection.Pattern]","] = None, rarity_threshold: float = 0.05, min_unique_common_ratio: float = 0.01, pattern_match_method: str = 'first', n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_ratio_of_rare_formats_not_greater_thanvar-float--0"},"add_condition_ratio_of_rare_formats_not_greater_than(var: float = 0)"),(0,i.kt)("p",null,"Add rare formats ratio condition."),(0,i.kt)("p",null,"This condition will check that ratio of the specified formats is not grater than X."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"var")," \u2013 format ratio upper bound"))),(0,i.kt)("h4",{id:"rundataset-deepchecksbasedatasetdataset-modelnone-2"},"run(dataset: deepchecks.base.dataset.Dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," \u2013 Dataset - The dataset object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"value: dictionary of all columns and found patterns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"display: pandas Dataframe per column, showing the rare-to-common-ratio, common formats, examples for"),(0,i.kt)("p",{parentName:"li"},"  common values and rare values")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult"))),(0,i.kt)("h2",{id:"deepcheckschecksintegrityspecial_chars-module"},"deepchecks.checks.integrity.special_chars module"),(0,i.kt)("p",null,"module contains Invalid Chars check."),(0,i.kt)("h3",{id:"class-specialcharacters"},"class SpecialCharacters()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Search in column","[s]"," for values that contains only special characters."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ones.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"variable.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_most_common")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of most common special-only samples to show in results")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_most_common-int--2-n_top_columns-int--10"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_most_common: int = 2, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_ratio_of_special_characters_not_grater_thanmax_ratio-float--0001"},"add_condition_ratio_of_special_characters_not_grater_than(max_ratio: float = 0.001)"),(0,i.kt)("p",null,"Add condition - ratio of entirely special character in column."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum ratio allowed."))),(0,i.kt)("h4",{id:"rundataset-modelnone-3"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  DataFrame with (\u2018invalids\u2019) for any column with special_characters chars.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (CheckResult)"))),(0,i.kt)("h2",{id:"deepcheckschecksintegritystring_length_out_of_bounds-module"},"deepchecks.checks.integrity.string_length_out_of_bounds module"),(0,i.kt)("p",null,"String length outlier check."),(0,i.kt)("h3",{id:"class-stringlengthoutofbounds"},"class StringLengthOutOfBounds()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Detect strings with length that is much longer/shorter than the identified \u201cnormal\u201d string lengths."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns\nvariable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"num_percentiles")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of percentiles values to retrieve for the length of the samples in the string\ncolumn. Affects the resolution of string lengths that is used to detect outliers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"inner_quantile_range")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 The int upper percentile ","[0-100]"," defining the inner percentile range.\nE.g. for 98 the range would be 2%-98%.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"outlier_factor")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Strings would be defined as outliers if their length is outlier_factor times more/less\nthan the values inside the inner quantile range.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-num_percentiles-int--1000-inner_quantile_range-int--94-outlier_factor-int--4-n_top_columns-int--10"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, num_percentiles: int = 1000, inner_quantile_range: int = 94, outlier_factor: int = 4, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_number_of_outliers_not_greater_thanmax_outliers-int--0"},"add_condition_number_of_outliers_not_greater_than(max_outliers: int = 0)"),(0,i.kt)("p",null,"Add condition - require column not to have more than given number of string length outliers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_outliers")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of string length outliers which is the maximum allowed."))),(0,i.kt)("h4",{id:"add_condition_ratio_of_outliers_not_greater_thanmax_ratio-float--0"},"add_condition_ratio_of_outliers_not_greater_than(max_ratio: float = 0)"),(0,i.kt)("p",null,"Add condition - require column not to have more than given ratio of string length outliers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum allowed string length outliers ratio."))),(0,i.kt)("h4",{id:"rundataset-modelnone-4"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 A dataset or pd.FataFrame object."))),(0,i.kt)("h2",{id:"deepcheckschecksintegritystring_mismatch-module"},"deepchecks.checks.integrity.string_mismatch module"),(0,i.kt)("p",null,"String mismatch functions."),(0,i.kt)("h3",{id:"class-stringmismatch"},"class StringMismatch()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.SingleDatasetBaseCheck")),(0,i.kt)("p",null,"Detect different variants of string categories (e.g. \u201cmislabeled\u201d vs \u201cmis-labeled\u201d) in a categorical column."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored\nones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns\nvariable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)"))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10-1"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_no_variants"},"add_condition_no_variants()"),(0,i.kt)("p",null,"Add condition - no variants are allowed."),(0,i.kt)("h4",{id:"add_condition_not_more_variants_thannum_max_variants-int"},"add_condition_not_more_variants_than(num_max_variants: int)"),(0,i.kt)("p",null,"Add condition - no more than given number of variants are allowed (per string baseform)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"num_max_variants")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Maximum number of variants allowed."))),(0,i.kt)("h4",{id:"add_condition_ratio_variants_not_more_thanmax_ratio-float--001"},"add_condition_ratio_variants_not_more_than(max_ratio: float = 0.01)"),(0,i.kt)("p",null,"Add condition - percentage of variants in data is not allowed above given threshold."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"max_ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum percent of variants allowed in data."))),(0,i.kt)("h4",{id:"rundataset-modelnone-5"},"run(dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 A dataset or pd.FataFrame object."))),(0,i.kt)("h2",{id:"deepcheckschecksintegritystring_mismatch_comparison-module"},"deepchecks.checks.integrity.string_mismatch_comparison module"),(0,i.kt)("p",null,"String mismatch functions."),(0,i.kt)("h3",{id:"class-stringmismatchcomparison"},"class StringMismatchComparison()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.CompareDatasetsBaseCheck")),(0,i.kt)("p",null,"Detect different variants of string categories between the same categorical column in two datasets."),(0,i.kt)("p",null,"This check compares the same categorical column within a dataset and baseline and checks whether there are\nvariants of similar strings that exists only in dataset and not in baseline.\nSpecifically, we define similarity between strings if they are equal when ignoring case and non-letter\ncharacters.\nExample:\nWe have a baseline dataset with similar strings \u2018string\u2019 and \u2018St. Ring\u2019, which have different meanings.\nOur tested dataset has the strings \u2018string\u2019, \u2018St. Ring\u2019 and a new phrase, \u2018st.  ring\u2019.\nHere, we have a new variant of the above strings, and would like to be acknowledged, as this is obviously a\ndifferent version of \u2018St. Ring\u2019."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Args:")),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"columns (Union[str, Iterable[str]]): Columns to check, if none are given checks all columns except ignored\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"    ones.\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"ignore_columns (Union[str, Iterable[str]]): Columns to ignore, if none given checks based on columns\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"    variable\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"n_top_columns (int): (optional - used only if model was specified)\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"    amount of columns to show ordered by feature importance (date, index, label are first)\n"))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--10-2"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_top_columns: int = 10)"),(0,i.kt)("h4",{id:"add_condition_no_new_variants"},"add_condition_no_new_variants()"),(0,i.kt)("p",null,"Add condition - no new variants allowed in test data."),(0,i.kt)("h4",{id:"add_condition_ratio_new_variants_not_more_thanratio-float"},"add_condition_ratio_new_variants_not_more_than(ratio: float)"),(0,i.kt)("p",null,"Add condition - no new variants allowed above given percentage in test data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"ratio")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Max percentage of new variants in test data allowed."))),(0,i.kt)("h4",{id:"rundataset-baseline_dataset-modelnone-1"},"run(dataset, baseline_dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 A dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"baseline_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 A dataset object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 Not used in this check."))))),(0,i.kt)("h2",{id:"module-contents"},"Module contents"),(0,i.kt)("p",null,"Module contains all data integrity checks."))}d.isMDXComponent=!0}}]);