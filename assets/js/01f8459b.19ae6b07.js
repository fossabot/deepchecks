"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[369],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,k=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return a?r.createElement(k,s(s({ref:t},m),{},{components:a})):r.createElement(k,s({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1210:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return d}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),s=["components"],o={},l="deepchecks.checks.distribution package",p={unversionedId:"api-reference/deepchecks.checks.distribution",id:"api-reference/deepchecks.checks.distribution",isDocsHomePage:!1,title:"deepchecks.checks.distribution package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.checks.distribution.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.checks.distribution",permalink:"/docs/api-reference/deepchecks.checks.distribution",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.base package",permalink:"/docs/api-reference/deepchecks.base"},next:{title:"deepchecks.checks.integrity package",permalink:"/docs/api-reference/deepchecks.checks.integrity"}},m=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.checks.distribution.plot module",id:"deepcheckschecksdistributionplot-module",children:[{value:"plot_density(data, xs, color=&#39;b&#39;, alpha: float = 0.7, **kwargs)",id:"plot_densitydata-xs-colorb-alpha-float--07-kwargs",children:[],level:3}],level:2},{value:"deepchecks.checks.distribution.preprocessing module",id:"deepcheckschecksdistributionpreprocessing-module",children:[{value:"preprocess_dataset_to_scaled_numerics(baseline_features: pandas.core.frame.DataFrame, test_features: pandas.core.frame.DataFrame, categorical_columns: Liststr, max_num_categories)",id:"preprocess_dataset_to_scaled_numericsbaseline_features-pandascoreframedataframe-test_features-pandascoreframedataframe-categorical_columns-liststr-max_num_categories",children:[],level:3}],level:2},{value:"deepchecks.checks.distribution.rare_category_encoder module",id:"deepcheckschecksdistributionrare_category_encoder-module",children:[{value:"class RareCategoryEncoder()",id:"class-rarecategoryencoder",children:[{value:"DEFAULT_OTHER_VALUE( = &#39;OTHER_RARE_CATEGORY&#39;)",id:"default_other_value--other_rare_category",children:[],level:4},{value:"__init__(max_num_categories: int = 10, cols: Optional[Liststr] = None)",id:"__init__max_num_categories-int--10-cols-optionalliststr--none",children:[],level:4},{value:"fit(data: pandas.core.frame.DataFrame)",id:"fitdata-pandascoreframedataframe",children:[],level:4},{value:"fit_transform(data: pandas.core.frame.DataFrame)",id:"fit_transformdata-pandascoreframedataframe",children:[],level:4},{value:"transform(data: pandas.core.frame.DataFrame)",id:"transformdata-pandascoreframedataframe",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.distribution.train_test_drift module",id:"deepcheckschecksdistributiontrain_test_drift-module",children:[{value:"class TrainTestDrift()",id:"class-traintestdrift",children:[{value:"__init__(columns: Optional[Union[str, Iterablestr]] = None, ignore_columns: Optional[Union[str, Iterablestr]] = None, n_top_columns: int = 5, sort_feature_by: str = &#39;feature importance&#39;, max_num_categories: int = 10)",id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--5-sort_feature_by-str--feature-importance-max_num_categories-int--10",children:[],level:4},{value:"add_condition_drift_score_not_greater_than(max_allowed_psi_score: float = 0.2, max_allowed_earth_movers_score: float = 0.1, number_of_top_features_to_consider: int = 5)",id:"add_condition_drift_score_not_greater_thanmax_allowed_psi_score-float--02-max_allowed_earth_movers_score-float--01-number_of_top_features_to_consider-int--5",children:[],level:4},{value:"run(train_dataset, test_dataset, model=None)",id:"runtrain_dataset-test_dataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.distribution.trust_score module",id:"deepcheckschecksdistributiontrust_score-module",children:[{value:"class TrustScore()",id:"class-trustscore",children:[{value:"__init__(k_filter: int = 10, alpha: float = 0.0, filter_type: str = &#39;distance_knn&#39;, leaf_size: int = 40, metric: str = &#39;euclidean&#39;, dist_filter_type: str = &#39;point&#39;)",id:"__init__k_filter-int--10-alpha-float--00-filter_type-str--distance_knn-leaf_size-int--40-metric-str--euclidean-dist_filter_type-str--point",children:[],level:4},{value:"filter_by_distance_knn(X: numpy.ndarray)",id:"filter_by_distance_knnx-numpyndarray",children:[],level:4},{value:"filter_by_probability_knn(X: numpy.ndarray, Y: numpy.ndarray)",id:"filter_by_probability_knnx-numpyndarray-y-numpyndarray",children:[],level:4},{value:"fit(X: numpy.ndarray, Y: numpy.ndarray)",id:"fitx-numpyndarray-y-numpyndarray",children:[],level:4},{value:"static process_confidence_scores(baseline_scores: numpy.ndarray, test_scores: numpy.ndarray)",id:"static-process_confidence_scoresbaseline_scores-numpyndarray-test_scores-numpyndarray",children:[],level:4},{value:"score(X: numpy.ndarray, Y: numpy.ndarray, k: int = 2, dist_type: str = &#39;point&#39;)",id:"scorex-numpyndarray-y-numpyndarray-k-int--2-dist_type-str--point",children:[],level:4}],level:3}],level:2},{value:"deepchecks.checks.distribution.trust_score_comparison module",id:"deepcheckschecksdistributiontrust_score_comparison-module",children:[{value:"class TrustScoreComparison()",id:"class-trustscorecomparison",children:[{value:"__init__(k_filter: int = 10, alpha: float = 0.001, max_number_categories: int = 10, min_test_samples: int = 300, sample_size: int = 10000, random_state: int = 42, n_to_show: int = 5, percent_top_scores_to_hide: float = 0.01)",id:"__init__k_filter-int--10-alpha-float--0001-max_number_categories-int--10-min_test_samples-int--300-sample_size-int--10000-random_state-int--42-n_to_show-int--5-percent_top_scores_to_hide-float--001",children:[],level:4},{value:"add_condition_mean_score_percent_decline_not_greater_than(threshold: float = 0.2)",id:"add_condition_mean_score_percent_decline_not_greater_thanthreshold-float--02",children:[],level:4},{value:"run(train_dataset, test_dataset, model=None)",id:"runtrain_dataset-test_dataset-modelnone-1",children:[],level:4}],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],c={toc:m};function d(e){var t=e.components,a=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deepcheckschecksdistribution-package"},"deepchecks.checks.distribution package"),(0,i.kt)("h2",{id:"submodules"},"Submodules"),(0,i.kt)("h2",{id:"deepcheckschecksdistributionplot-module"},"deepchecks.checks.distribution.plot module"),(0,i.kt)("p",null,"A module containing utils for plotting distributions."),(0,i.kt)("h3",{id:"plot_densitydata-xs-colorb-alpha-float--07-kwargs"},"plot_density(data, xs, color='b', alpha: float = 0.7, ","*","*","kwargs)"),(0,i.kt)("p",null,"Plot a KDE density plot of the data. Adding labels and other plotting attributes is left to ths user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"(**"),")*",(0,i.kt)("em",{parentName:"p"}," ("),"color*) \u2013 The data used to compute the pdf function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"xs")," (",(0,i.kt)("em",{parentName:"p"},"iterable"),") \u2013 List of x values to plot the computed pdf for.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"(**"),")** \u2013 Color of the filled graph.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"alpha")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Transparency of the filled graph.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  The computed pdf values at the points xs.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  np.array"))),(0,i.kt)("h2",{id:"deepcheckschecksdistributionpreprocessing-module"},"deepchecks.checks.distribution.preprocessing module"),(0,i.kt)("p",null,"Module of preprocessing functions."),(0,i.kt)("h3",{id:"preprocess_dataset_to_scaled_numericsbaseline_features-pandascoreframedataframe-test_features-pandascoreframedataframe-categorical_columns-liststr-max_num_categories"},"preprocess_dataset_to_scaled_numerics(baseline_features: pandas.core.frame.DataFrame, test_features: pandas.core.frame.DataFrame, categorical_columns: List","[str]",", max_num_categories)"),(0,i.kt)("p",null,"Preprocess given features to scaled numerics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"baseline_features")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 Will be used for fit and also transformed. Expect to get only features")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"test_features")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 Will be transformed according to baseline_data. Expect to get only features")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"categorical_columns")," (",(0,i.kt)("em",{parentName:"p"},"List",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 Indicates names of categorical columns in both DataFrames.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_num_categories")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Indicates the maximum number of unique categories in a single categorical column\n(rare categories will be changed to a form of \u201cother\u201d)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  returns both datasets transformed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (DataFrame, DataFrame)"))),(0,i.kt)("h2",{id:"deepcheckschecksdistributionrare_category_encoder-module"},"deepchecks.checks.distribution.rare_category_encoder module"),(0,i.kt)("p",null,"Module of RareCategoryEncoder."),(0,i.kt)("h3",{id:"class-rarecategoryencoder"},"class RareCategoryEncoder()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"Encodes rare categories into an \u201cother\u201d parameter."),(0,i.kt)("p",null,"Note that this encoder assumes data is received as a DataFrame."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_num_categories")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Indicates the maximum number of unique categories in a single categorical column\n(rare categories will be changed to a form of \u201cother\u201d)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"cols")," (",(0,i.kt)("em",{parentName:"p"},"List",(0,i.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 Columns to limit the encoder to work on. If non are given will work on all columns given\nin fit"))))),(0,i.kt)("h4",{id:"default_other_value--other_rare_category"},"DEFAULT_OTHER_VALUE( = 'OTHER_RARE_CATEGORY')"),(0,i.kt)("h4",{id:"__init__max_num_categories-int--10-cols-optionalliststr--none"},"_","_init__(max_num_categories: int = 10, cols: Optional[List","[str]","] = None)"),(0,i.kt)("h4",{id:"fitdata-pandascoreframedataframe"},"fit(data: pandas.core.frame.DataFrame)"),(0,i.kt)("p",null,"Fit the encoder using given dataframe."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"data")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 data to fit from"))),(0,i.kt)("h4",{id:"fit_transformdata-pandascoreframedataframe"},"fit_transform(data: pandas.core.frame.DataFrame)"),(0,i.kt)("p",null,"Run fit and transform on given data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"data")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 data to fit on and transform")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  transformed data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (DataFrame)"))),(0,i.kt)("h4",{id:"transformdata-pandascoreframedataframe"},"transform(data: pandas.core.frame.DataFrame)"),(0,i.kt)("p",null,"Transform given data according to columns processed in fit."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"data")," (",(0,i.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 data to transform")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  transformed data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (DataFrame)"))),(0,i.kt)("h2",{id:"deepcheckschecksdistributiontrain_test_drift-module"},"deepchecks.checks.distribution.train_test_drift module"),(0,i.kt)("p",null,"Module contains Train Test Drift check."),(0,i.kt)("h3",{id:"class-traintestdrift"},"class TrainTestDrift()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,i.kt)("p",null,"Calculate drift between train dataset and test dataset."),(0,i.kt)("p",null,"Check calculates a drift score for each column in test dataset, by comparing its distribution to the train\ndataset.\nFor numerical columns, we use the Earth Movers Distance.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://www.lexjansen.com/wuss/2017/47_Final_Paper_PDF.pdf"},"https://www.lexjansen.com/wuss/2017/47_Final_Paper_PDF.pdf"),"\nFor categorical columns, we use the Population Stability Index (PSI).\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Wasserstein_metric"},"https://en.wikipedia.org/wiki/Wasserstein_metric"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to check, if none are given checks all columns except ignored")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ones.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,i.kt)("em",{parentName:"p"},"Union",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},", "),"Iterable",(0,i.kt)("strong",{parentName:"em"},"["),"str",(0,i.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Columns to ignore, if none given checks based on columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"variable.")," \u2013 ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 (optional - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"sort_feature_by")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 Indicates how features will be sorted. Can be either \u201cfeature importance\u201d\nor \u201cdrift score\u201d")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_num_categories")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Only for categorical columns. Max number of allowed categories. If there are more,\nthey are binned into an \u201cOther\u201d category. If max_num_categories=None, there is no limit."))))),(0,i.kt)("h4",{id:"__init__columns-optionalunionstr-iterablestr--none-ignore_columns-optionalunionstr-iterablestr--none-n_top_columns-int--5-sort_feature_by-str--feature-importance-max_num_categories-int--10"},"_","_init__(columns: Optional[Union[str, Iterable","[str]","]] = None, ignore_columns: Optional[Union[str, Iterable","[str]","]] = None, n_top_columns: int = 5, sort_feature_by: str = 'feature importance', max_num_categories: int = 10)"),(0,i.kt)("h4",{id:"add_condition_drift_score_not_greater_thanmax_allowed_psi_score-float--02-max_allowed_earth_movers_score-float--01-number_of_top_features_to_consider-int--5"},"add_condition_drift_score_not_greater_than(max_allowed_psi_score: float = 0.2, max_allowed_earth_movers_score: float = 0.1, number_of_top_features_to_consider: int = 5)"),(0,i.kt)("p",null,"Add condition - require drift score to not be more than a certain threshold."),(0,i.kt)("p",null,"The industry standard for PSI limit is above 0.2.\nEarth movers does not have a common industry standard."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_allowed_psi_score")," \u2013 the max threshold for the PSI score")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_allowed_earth_movers_score")," \u2013 the max threshold for the Earth Mover\u2019s Distance score")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"number_of_top_features_to_consider")," \u2013 the number of top features for which exceed the threshold will fail the\ncondition.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  False if any column has passed the max threshold, True otherwise")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  ConditionResult"))),(0,i.kt)("h4",{id:"runtrain_dataset-test_dataset-modelnone"},"run(train_dataset, test_dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The training dataset object. Must contain a label column.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 The test dataset object. Must contain a label column.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 A scikit-learn-compatible fitted estimator instance")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  value: dictionary of column name to drift score.\ndisplay: distribution graph for each column, comparing the train and test distributions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  CheckResult")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not a Dataset or DataFrame instance"))),(0,i.kt)("h2",{id:"deepcheckschecksdistributiontrust_score-module"},"deepchecks.checks.distribution.trust_score module"),(0,i.kt)("p",null,"Module of trust score confidence method."),(0,i.kt)("p",null,"Code is taken from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/TrustScore"},"https://github.com/google/TrustScore"),"\nBased on: arXiv:1805.11783 ","[stat.ML]"),(0,i.kt)("p",null,"Used according to the following License:"),(0,i.kt)("p",null,"Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"http://www.apache.org/licenses/LICENSE-2.0"},"http://www.apache.org/licenses/LICENSE-2.0"))),(0,i.kt)("p",null,"Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."),(0,i.kt)("h3",{id:"class-trustscore"},"class TrustScore()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"Calculate trust score."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"k_filter")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of neighbors used during either kNN distance or probability filtering.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"alpha")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Fraction of instances to filter out to reduce impact of outliers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filter_type")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 Filter method; either \u2018distance_knn\u2019 or \u2018probability_knn\u2019")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"leaf_size")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of points at which to switch to brute-force. Affects speed and memory required to\nbuild trees. Memory to store the tree scales with n_samples / leaf_size.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"metric")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 Distance metric used for the tree. See sklearn\u2019s DistanceMetric class for a list of available\nmetrics.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dist_filter_type")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 Use either the distance to the k-nearest point (dist_filter_type = \u2018point\u2019) or\nthe average distance from the first to the k-nearest point in the data\n(dist_filter_type = \u2018mean\u2019)."))))),(0,i.kt)("h4",{id:"__init__k_filter-int--10-alpha-float--00-filter_type-str--distance_knn-leaf_size-int--40-metric-str--euclidean-dist_filter_type-str--point"},"_","_init__(k_filter: int = 10, alpha: float = 0.0, filter_type: str = 'distance_knn', leaf_size: int = 40, metric: str = 'euclidean', dist_filter_type: str = 'point')"),(0,i.kt)("h4",{id:"filter_by_distance_knnx-numpyndarray"},"filter_by_distance_knn(X: numpy.ndarray)"),(0,i.kt)("p",null,"Filter out instances with low kNN density."),(0,i.kt)("p",null,"Calculate distance to k-nearest point in the data for each instance and remove instances above a cutoff\ndistance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"X")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Data to filter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Filtered data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (np.ndarray)"))),(0,i.kt)("h4",{id:"filter_by_probability_knnx-numpyndarray-y-numpyndarray"},"filter_by_probability_knn(X: numpy.ndarray, Y: numpy.ndarray)"),(0,i.kt)("p",null,"Filter out instances with high label disagreement amongst its k nearest neighbors."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"X")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Data")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Y")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Predicted class labels")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Filtered data and labels.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (np.ndarray, np.ndarray)"))),(0,i.kt)("h4",{id:"fitx-numpyndarray-y-numpyndarray"},"fit(X: numpy.ndarray, Y: numpy.ndarray)"),(0,i.kt)("p",null,"Build KDTrees for each prediction class."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"X")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Data.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Y")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Target labels, either one-hot encoded or the actual class label."))))),(0,i.kt)("h4",{id:"static-process_confidence_scoresbaseline_scores-numpyndarray-test_scores-numpyndarray"},"static process_confidence_scores(baseline_scores: numpy.ndarray, test_scores: numpy.ndarray)"),(0,i.kt)("p",null,"Process confidence scores."),(0,i.kt)("h4",{id:"scorex-numpyndarray-y-numpyndarray-k-int--2-dist_type-str--point"},"score(X: numpy.ndarray, Y: numpy.ndarray, k: int = 2, dist_type: str = 'point')"),(0,i.kt)("p",null,"Calculate trust scores."),(0,i.kt)("p",null,"ratio of distance to closest class other than the predicted class to distance to predicted class."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"X")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Instances to calculate trust score for.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Y")," (",(0,i.kt)("em",{parentName:"p"},"np.ndarray"),") \u2013 Either prediction probabilities for each class or the predicted class.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"k")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of nearest neighbors used for distance calculation.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dist_type")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 Use either the distance to the k-nearest point (dist_type = \u2018point\u2019) or the average\ndistance from the first to the k-nearest point in the data (dist_type = \u2018mean\u2019).")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Batch with trust scores and the closest not predicted class.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("p",{parentName:"li"},"  (np.ndarray, np.ndarray)"))),(0,i.kt)("h2",{id:"deepcheckschecksdistributiontrust_score_comparison-module"},"deepchecks.checks.distribution.trust_score_comparison module"),(0,i.kt)("p",null,"Module of trust score comparison check."),(0,i.kt)("h3",{id:"class-trustscorecomparison"},"class TrustScoreComparison()"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.TrainTestBaseCheck")),(0,i.kt)("p",null,"Compares the model\u2019s trust scores of the train dataset with scores of the test dataset."),(0,i.kt)("p",null,"The process is as follows:\n","*"," Pre-process the train and test data into scaled numerics.\n","*"," Train a TrustScore (",(0,i.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1805.11783"},"https://arxiv.org/abs/1805.11783"),") regressor based on train data + label.\n","*"," Predict on test data using the model.\n","*"," Use TrustScore to score the prediction of the model."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"k_filter")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 used in TrustScore (Number of neighbors used during either kNN distance or probability\nfiltering)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"alpha")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 used in TrustScore (Fraction of instances to filter out to reduce impact of outliers)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"max_number_categories")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Indicates the maximum number of unique categories in a single categorical\ncolumn (rare categories will be changed to a form of \u201cother\u201d)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"min_test_samples")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Minimal number of samples in train data to be able to run this check")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"sample_size")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of samples to use for the check for train and test. if dataset contains less than\nsample_size than all the dataset will be used.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"random_state")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 The random state to use for sampling.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"n_to_show")," (",(0,i.kt)("em",{parentName:"p"},"int"),") \u2013 Number of samples to show of worst and best trust score."))))),(0,i.kt)("h4",{id:"__init__k_filter-int--10-alpha-float--0001-max_number_categories-int--10-min_test_samples-int--300-sample_size-int--10000-random_state-int--42-n_to_show-int--5-percent_top_scores_to_hide-float--001"},"_","_init__(k_filter: int = 10, alpha: float = 0.001, max_number_categories: int = 10, min_test_samples: int = 300, sample_size: int = 10000, random_state: int = 42, n_to_show: int = 5, percent_top_scores_to_hide: float = 0.01)"),(0,i.kt)("h4",{id:"add_condition_mean_score_percent_decline_not_greater_thanthreshold-float--02"},"add_condition_mean_score_percent_decline_not_greater_than(threshold: float = 0.2)"),(0,i.kt)("p",null,"Add condition."),(0,i.kt)("p",null,"Percent of decline between the mean trust score of train and the mean trust score of test is not above\ngiven threshold."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"threshold")," (",(0,i.kt)("em",{parentName:"p"},"float"),") \u2013 Maximum percentage decline allowed (value 0 and above)"))),(0,i.kt)("h4",{id:"runtrain_dataset-test_dataset-modelnone-1"},"run(train_dataset, test_dataset, model=None)"),(0,i.kt)("p",null,"Run check."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"train_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 Dataset to use for TrustScore regressor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"test_dataset")," (",(0,i.kt)("em",{parentName:"p"},"Dataset"),") \u2013 Dataset to check for trust score")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"model")," \u2013 Model used to predict on the validation dataset"))))),(0,i.kt)("h2",{id:"module-contents"},"Module contents"),(0,i.kt)("p",null,"Module containing all data distribution checks."))}d.isMDXComponent=!0}}]);