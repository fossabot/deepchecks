"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[843],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,k=u["".concat(o,".").concat(d)]||u[d]||c[d]||l;return a?r.createElement(k,s(s({ref:t},m),{},{components:a})):r.createElement(k,s({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<l;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7137:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),s=["components"],i={},o="deepchecks.utils package",p={unversionedId:"api-reference/deepchecks.utils",id:"api-reference/deepchecks.utils",isDocsHomePage:!1,title:"deepchecks.utils package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.utils.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.utils",permalink:"/docs/api-reference/deepchecks.utils",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"deepchecks.suites package",permalink:"/docs/api-reference/deepchecks.suites"},next:{title:"deepchecks",permalink:"/docs/api-reference/modules"}},m=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.utils.dataframes module",id:"deepchecksutilsdataframes-module",children:[{value:"filter_columns_with_validation(df: pandas.core.frame.DataFrame, columns: Optional[Union[str, Liststr]] = None, ignore_columns: Optional[Union[str, Liststr]] = None)",id:"filter_columns_with_validationdf-pandascoreframedataframe-columns-optionalunionstr-liststr--none-ignore_columns-optionalunionstr-liststr--none",children:[],level:3},{value:"validate_columns_exist(df: pandas.core.frame.DataFrame, columns: Union[None, str, Sequencestr])",id:"validate_columns_existdf-pandascoreframedataframe-columns-unionnone-str-sequencestr",children:[],level:3}],level:2},{value:"deepchecks.utils.features module",id:"deepchecksutilsfeatures-module",children:[{value:"calculate_feature_importance(model: Any, dataset: deepchecks.base.dataset.Dataset, random_state: int = 42)",id:"calculate_feature_importancemodel-any-dataset-deepchecksbasedatasetdataset-random_state-int--42",children:[],level:3},{value:"calculate_feature_importance_or_null(dataset: deepchecks.base.dataset.Dataset, model: Any)",id:"calculate_feature_importance_or_nulldataset-deepchecksbasedatasetdataset-model-any",children:[],level:3},{value:"column_importance_sorter_df(df: pandas.core.frame.DataFrame, ds: deepchecks.base.dataset.Dataset, feature_importances: pandas.core.series.Series, n_top: int = 10, col: Optionalstr = None)",id:"column_importance_sorter_dfdf-pandascoreframedataframe-ds-deepchecksbasedatasetdataset-feature_importances-pandascoreseriesseries-n_top-int--10-col-optionalstr--none",children:[],level:3},{value:"column_importance_sorter_dict(cols_dict: Dict, ds: deepchecks.base.dataset.Dataset, feature_importances: pandas.core.series.Series, n_top: int = 10)",id:"column_importance_sorter_dictcols_dict-dict-ds-deepchecksbasedatasetdataset-feature_importances-pandascoreseriesseries-n_top-int--10",children:[],level:3}],level:2},{value:"deepchecks.utils.ipython module",id:"deepchecksutilsipython-module",children:[{value:"is_notebook()",id:"is_notebook",children:[],level:3},{value:"is_widgets_enabled()",id:"is_widgets_enabled",children:[],level:3}],level:2},{value:"deepchecks.utils.metrics module",id:"deepchecksutilsmetrics-module",children:[{value:"class ModelType()",id:"class-modeltype",children:[{value:"BINARY( = &#39;binary&#39;)",id:"binary--binary",children:[],level:4},{value:"MULTICLASS( = &#39;multiclass&#39;)",id:"multiclass--multiclass",children:[],level:4},{value:"REGRESSION( = &#39;regression&#39;)",id:"regression--regression",children:[],level:4}],level:3},{value:"get_metrics_list(model, dataset: deepchecks.base.dataset.Dataset, alternative_metrics: Optional[Dictstr, Callable] = None)",id:"get_metrics_listmodel-dataset-deepchecksbasedatasetdataset-alternative_metrics-optionaldictstr-callable--none",children:[],level:3},{value:"get_metrics_ratio(train_metric: float, test_metric: float, max_ratio=inf)",id:"get_metrics_ratiotrain_metric-float-test_metric-float-max_ratioinf",children:[],level:3},{value:"task_type_check(model: Unionsklearn.base.ClassifierMixin, sklearn.base.RegressorMixin, dataset: deepchecks.base.dataset.Dataset)",id:"task_type_checkmodel-unionsklearnbaseclassifiermixin-sklearnbaseregressormixin-dataset-deepchecksbasedatasetdataset",children:[],level:3},{value:"validate_scorer(scorer, model, dataset)",id:"validate_scorerscorer-model-dataset",children:[],level:3}],level:2},{value:"deepchecks.utils.plot module",id:"deepchecksutilsplot-module",children:[{value:"create_colorbar_barchart_for_check(x: numpy.ndarray, y: numpy.ndarray, ylabel: str = &#39;Result&#39;, xlabel: str = &#39;Features&#39;, color_map: str = &#39;RdYlGn_r&#39;, start: float = 0, stop: float = 1.0, tick_steps: float = 0.1, color_label: str = &#39;Color&#39;, color_shift_midpoint: float = 0.5, check_name: str = &#39;&#39;)",id:"create_colorbar_barchart_for_checkx-numpyndarray-y-numpyndarray-ylabel-str--result-xlabel-str--features-color_map-str--rdylgn_r-start-float--0-stop-float--10-tick_steps-float--01-color_label-str--color-color_shift_midpoint-float--05-check_name-str--",children:[],level:3},{value:"shifted_color_map(cmap, start=0, midpoint=0.5, stop=1.0, name: str = &#39;shiftedcmap&#39;, transparent_from: Optionalfloat = None)",id:"shifted_color_mapcmap-start0-midpoint05-stop10-name-str--shiftedcmap-transparent_from-optionalfloat--none",children:[],level:3}],level:2},{value:"deepchecks.utils.strings module",id:"deepchecksutilsstrings-module",children:[{value:"format_columns_for_condition(columns: Optional[Sequencestr] = None, ignore_columns: Optional[Sequencestr] = None)",id:"format_columns_for_conditioncolumns-optionalsequencestr--none-ignore_columns-optionalsequencestr--none",children:[],level:3},{value:"format_number(x, floating_point: int = 2)",id:"format_numberx-floating_point-int--2",children:[],level:3},{value:"format_percent(ratio: float, floating_point: int = 2)",id:"format_percentratio-float-floating_point-int--2",children:[],level:3},{value:"get_base_form_to_variants_dict(uniques: Iterablestr)",id:"get_base_form_to_variants_dictuniques-iterablestr",children:[],level:3},{value:"is_string_column(column: pandas.core.series.Series)",id:"is_string_columncolumn-pandascoreseriesseries",children:[],level:3},{value:"split_and_keep(s: str, separators: Union[str, Iterablestr])",id:"split_and_keeps-str-separators-unionstr-iterablestr",children:[],level:3},{value:"split_by_order(s: str, separators: Iterablestr, keep: bool = True)",id:"split_by_orders-str-separators-iterablestr-keep-bool--true",children:[],level:3},{value:"split_camel_case(string: str)",id:"split_camel_casestring-str",children:[],level:3},{value:"string_baseform(string: str)",id:"string_baseformstring-str",children:[],level:3}],level:2},{value:"deepchecks.utils.validation module",id:"deepchecksutilsvalidation-module",children:[{value:"model_type_validation(model: Any)",id:"model_type_validationmodel-any",children:[],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],c={toc:m};function u(e){var t=e.components,a=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"deepchecksutils-package"},"deepchecks.utils package"),(0,l.kt)("h2",{id:"submodules"},"Submodules"),(0,l.kt)("h2",{id:"deepchecksutilsdataframes-module"},"deepchecks.utils.dataframes module"),(0,l.kt)("p",null,"Contain functions for handling dataframes in checks."),(0,l.kt)("h3",{id:"filter_columns_with_validationdf-pandascoreframedataframe-columns-optionalunionstr-liststr--none-ignore_columns-optionalunionstr-liststr--none"},"filter_columns_with_validation(df: pandas.core.frame.DataFrame, columns: Optional[Union[str, List","[str]","]] = None, ignore_columns: Optional[Union[str, List","[str]","]] = None)"),(0,l.kt)("p",null,"Filter DataFrame columns by given params."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"df")," (",(0,l.kt)("em",{parentName:"p"},"pd.DataFrame"),") \u2013 ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"columns")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"List",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},"]"),", ",(0,l.kt)("strong",{parentName:"em"},"None"),"]"),") \u2013 Column names to keep.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"List",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},"]"),", ",(0,l.kt)("strong",{parentName:"em"},"None"),"]"),") \u2013 Column names to drop.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 In case one of columns given don\u2019t exists raise error"))),(0,l.kt)("h3",{id:"validate_columns_existdf-pandascoreframedataframe-columns-unionnone-str-sequencestr"},"validate_columns_exist(df: pandas.core.frame.DataFrame, columns: Union[None, str, Sequence","[str]","])"),(0,l.kt)("p",null,"Validate given columns exist in dataframe."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"df")," (",(0,l.kt)("em",{parentName:"p"},"pd.DataFrame"),") \u2013 ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"columns")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"None",(0,l.kt)("strong",{parentName:"em"},", "),"str",(0,l.kt)("strong",{parentName:"em"},", "),"List",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},"]"),"]"),") \u2013 Column names to check")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 In case one of columns given don\u2019t exists raise error"))),(0,l.kt)("h2",{id:"deepchecksutilsfeatures-module"},"deepchecks.utils.features module"),(0,l.kt)("p",null,"Utils module containing feature importance calculations."),(0,l.kt)("h3",{id:"calculate_feature_importancemodel-any-dataset-deepchecksbasedatasetdataset-random_state-int--42"},"calculate_feature_importance(model: Any, dataset: deepchecks.base.dataset.Dataset, random_state: int = 42)"),(0,l.kt)("p",null,"Calculate features effect on the label."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"Any"),") \u2013 A fitted model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 dataset used to fit the model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"random_state")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 random seed for permutation importance calculation")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  pd.Series of feature importance normalized to 0-1 indexed by feature names")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"NotFittedError")," \u2013 Call \u2018fit\u2019 with appropriate arguments before using this estimator."))),(0,l.kt)("h3",{id:"calculate_feature_importance_or_nulldataset-deepchecksbasedatasetdataset-model-any"},"calculate_feature_importance_or_null(dataset: deepchecks.base.dataset.Dataset, model: Any)"),(0,l.kt)("p",null,"Calculate features effect on the label or None if the input is incorrect."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"Any"),") \u2013 A fitted model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 dataset used to fit the model")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  pd.Series of feature importance normalized to 0-1 indexed by feature names\nor None if the input is incorrect"))),(0,l.kt)("h3",{id:"column_importance_sorter_dfdf-pandascoreframedataframe-ds-deepchecksbasedatasetdataset-feature_importances-pandascoreseriesseries-n_top-int--10-col-optionalstr--none"},"column_importance_sorter_df(df: pandas.core.frame.DataFrame, ds: deepchecks.base.dataset.Dataset, feature_importances: pandas.core.series.Series, n_top: int = 10, col: Optional","[str]"," = None)"),(0,l.kt)("p",null,"Return the dataframe of of columns sorted and limited by feature importance."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"df")," (",(0,l.kt)("em",{parentName:"p"},"DataFrame"),") \u2013 DataFrame to sort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ds")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 dataset used to fit the model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"feature_importances")," (",(0,l.kt)("em",{parentName:"p"},"pd.Series"),") \u2013 feature importance normalized to 0-1 indexed by feature names")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"n_top")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 amount of columns to show ordered by feature importance (date, index, label are first)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"col")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 (optional) name of column to sort the dataframe by")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  the dataframe sorted and limited by feature importance.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  pd.DataFrame"))),(0,l.kt)("h3",{id:"column_importance_sorter_dictcols_dict-dict-ds-deepchecksbasedatasetdataset-feature_importances-pandascoreseriesseries-n_top-int--10"},"column_importance_sorter_dict(cols_dict: Dict, ds: deepchecks.base.dataset.Dataset, feature_importances: pandas.core.series.Series, n_top: int = 10)"),(0,l.kt)("p",null,"Return the dict of columns sorted and limited by feature importance."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"cols_dict")," (",(0,l.kt)("em",{parentName:"p"},"Dict"),") \u2013 dict where columns are the keys")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ds")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 dataset used to fit the model")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"feature_importances")," (",(0,l.kt)("em",{parentName:"p"},"pd.Series"),") \u2013 feature importance normalized to 0-1 indexed by feature names")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"n_top_columns")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 (optinal - used only if model was specified)\namount of columns to show ordered by feature importance (date, index, label are first)")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  the dict of columns sorted and limited by feature importance.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  Dict"))),(0,l.kt)("h2",{id:"deepchecksutilsipython-module"},"deepchecks.utils.ipython module"),(0,l.kt)("p",null,"Utils module containing useful global functions."),(0,l.kt)("h3",{id:"is_notebook"},"is_notebook()"),(0,l.kt)("p",null,"Check if we\u2019re in an interactive context (Notebook, GUI support) or terminal-based."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  True if we are in a notebook context, False otherwise"))),(0,l.kt)("h3",{id:"is_widgets_enabled"},"is_widgets_enabled()"),(0,l.kt)("p",null,"Check if we\u2019re running in jupyter and having jupyter widgets extension enabled."),(0,l.kt)("h2",{id:"deepchecksutilsmetrics-module"},"deepchecks.utils.metrics module"),(0,l.kt)("p",null,"Utils module containing utilities for checks working with metrics."),(0,l.kt)("h3",{id:"class-modeltype"},"class ModelType()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"enum.Enum")),(0,l.kt)("p",null,"Enum containing suppoerted task types."),(0,l.kt)("h4",{id:"binary--binary"},"BINARY( = 'binary')"),(0,l.kt)("h4",{id:"multiclass--multiclass"},"MULTICLASS( = 'multiclass')"),(0,l.kt)("h4",{id:"regression--regression"},"REGRESSION( = 'regression')"),(0,l.kt)("h3",{id:"get_metrics_listmodel-dataset-deepchecksbasedatasetdataset-alternative_metrics-optionaldictstr-callable--none"},"get_metrics_list(model, dataset: deepchecks.base.dataset.Dataset, alternative_metrics: Optional[Dict","[str, Callable]","] = None)"),(0,l.kt)("p",null,"Return list of scorer objects to use in a metrics-dependant check."),(0,l.kt)("p",null,"If no alternative_metrics is supplied, then a default list of metrics is used per task type, as it is inferred\nfrom the dataset and model. If a list is supplied, then the scorer functions are checked and used instead."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"BaseEstimator"),") \u2013 Model object for which the metrics would be calculated")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 Dataset object on which the metrics would be calculated")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"alternative_metrics")," (",(0,l.kt)("em",{parentName:"p"},"Dict",(0,l.kt)("strong",{parentName:"em"},"["),"str",(0,l.kt)("strong",{parentName:"em"},", "),"Callable**]"),") \u2013 Optional dictionary of sklearn scorers to use instead of default list")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  Dictionary containing names of metrics and scorer functions for the metrics."))),(0,l.kt)("h3",{id:"get_metrics_ratiotrain_metric-float-test_metric-float-max_ratioinf"},"get_metrics_ratio(train_metric: float, test_metric: float, max_ratio=inf)"),(0,l.kt)("p",null,"Return the ratio of test metric compared to train metric."),(0,l.kt)("h3",{id:"task_type_checkmodel-unionsklearnbaseclassifiermixin-sklearnbaseregressormixin-dataset-deepchecksbasedatasetdataset"},"task_type_check(model: Union","[sklearn.base.ClassifierMixin, sklearn.base.RegressorMixin]",", dataset: deepchecks.base.dataset.Dataset)"),(0,l.kt)("p",null,"Check task type (regression, binary, multiclass) according to model object and label column."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"model")," (",(0,l.kt)("em",{parentName:"p"},"Union",(0,l.kt)("strong",{parentName:"em"},"["),"ClassifierMixin",(0,l.kt)("strong",{parentName:"em"},", "),"RegressorMixin**]"),") \u2013 Model object - used to check if has predict_proba()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dataset")," (",(0,l.kt)("em",{parentName:"p"},"Dataset"),") \u2013 dataset - used to count the number of unique labels")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  TaskType enum corresponding to the model and dataset"))),(0,l.kt)("h3",{id:"validate_scorerscorer-model-dataset"},"validate_scorer(scorer, model, dataset)"),(0,l.kt)("p",null,"If string, get scorer from sklearn. If callable, do heuristic to see if valid."),(0,l.kt)("h2",{id:"deepchecksutilsplot-module"},"deepchecks.utils.plot module"),(0,l.kt)("p",null,"Utils module containing utilities for plotting."),(0,l.kt)("h3",{id:"create_colorbar_barchart_for_checkx-numpyndarray-y-numpyndarray-ylabel-str--result-xlabel-str--features-color_map-str--rdylgn_r-start-float--0-stop-float--10-tick_steps-float--01-color_label-str--color-color_shift_midpoint-float--05-check_name-str--"},"create_colorbar_barchart_for_check(x: numpy.ndarray, y: numpy.ndarray, ylabel: str = 'Result', xlabel: str = 'Features', color_map: str = 'RdYlGn_r', start: float = 0, stop: float = 1.0, tick_steps: float = 0.1, color_label: str = 'Color', color_shift_midpoint: float = 0.5, check_name: str = '')"),(0,l.kt)("p",null,"Output a colorbar barchart using matplotlib."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"x")," (",(0,l.kt)("em",{parentName:"p"},"np.array"),") \u2013 array containing x axis data.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"y")," (",(0,l.kt)("em",{parentName:"p"},"np.array"),") \u2013 array containing y axis data.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ylabel")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 Name of y axis (default=\u2019Result\u2019)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"xlabel")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 Name of x axis (default=\u2019Features\u2019)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"color_map")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 color_map name. (default=\u2019RdYlGn_r\u2019)\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://matplotlib.org/stable/tutorials/colors/colormaps.html"},"https://matplotlib.org/stable/tutorials/colors/colormaps.html")," for more details")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"start")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 start of y axis ticks (default=0)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"stop")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 end of y axis ticks (default=1.0)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"tick_steps")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 step to y axis ticks (default=0.1)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"color_shift_midpoint")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 midpoint of color map (default=0.5)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"check_name")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 name of the check that called this function (default=\u2019\u2019)"))))),(0,l.kt)("h3",{id:"shifted_color_mapcmap-start0-midpoint05-stop10-name-str--shiftedcmap-transparent_from-optionalfloat--none"},"shifted_color_map(cmap, start=0, midpoint=0.5, stop=1.0, name: str = 'shiftedcmap', transparent_from: Optional","[float]"," = None)"),(0,l.kt)("p",null,"Offset the \u201ccenter\u201d of a colormap."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"cmap : The matplotlib colormap to be altered\nstart : Offset from lowest point in the colormap\u2019s range.")),(0,l.kt)("blockquote",null,(0,l.kt)("blockquote",{parentName:"blockquote"},(0,l.kt)("p",{parentName:"blockquote"},"Defaults to 0.0 (no lower offset). Should be between\n0.0 and 1.0."))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"midpoint")),(0,l.kt)("blockquote",null,(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"0.5 (no shift). Should be between 0.0 and 1.0. In\ngeneral, this should be  1 - vmax/(vmax + abs(vmin))\nFor example if your data range from -15.0 to +5.0 and\nyou want the center of the colormap at 0.0, midpoint\nshould be set to  1 - 5/(5 + 15)) or 0.75\n"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"stop")),(0,l.kt)("blockquote",null,(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"Defaults to 1.0 (no upper offset). Should be between\n0.0 and 1.0.\n"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"transparent_from: The point between start and stop where the colors will start being transparent.")),(0,l.kt)("h2",{id:"deepchecksutilsstrings-module"},"deepchecks.utils.strings module"),(0,l.kt)("p",null,"String functions."),(0,l.kt)("h3",{id:"format_columns_for_conditioncolumns-optionalsequencestr--none-ignore_columns-optionalsequencestr--none"},"format_columns_for_condition(columns: Optional[Sequence","[str]","] = None, ignore_columns: Optional[Sequence","[str]","] = None)"),(0,l.kt)("p",null,"Format columns properties for display in condition name."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"columns")," (",(0,l.kt)("em",{parentName:"p"},"List",(0,l.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 columns property")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,l.kt)("em",{parentName:"p"},"List",(0,l.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 ignore_columns property"))))),(0,l.kt)("h3",{id:"format_numberx-floating_point-int--2"},"format_number(x, floating_point: int = 2)"),(0,l.kt)("p",null,"Format number for elegant display."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"(**"),")*",(0,l.kt)("em",{parentName:"p"}," ("),"x*) \u2013 Number to be displayed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"floating_point")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 Number of floating points to display")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  String of beautified number"))),(0,l.kt)("h3",{id:"format_percentratio-float-floating_point-int--2"},"format_percent(ratio: float, floating_point: int = 2)"),(0,l.kt)("p",null,"Format percent for elegant display."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"ratio")," (",(0,l.kt)("em",{parentName:"p"},"float"),") \u2013 Ratio to be displayed as percent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"floating_point")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 Number of floating points to display")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  String of ratio as percent"))),(0,l.kt)("h3",{id:"get_base_form_to_variants_dictuniques-iterablestr"},"get_base_form_to_variants_dict(uniques: Iterable","[str]",")"),(0,l.kt)("p",null,"Create dict of base-form of the uniques to their values."),(0,l.kt)("p",null,"function gets a set of strings, and returns a dictionary of shape Dict","[str, Set]","\nthe key being the \u201cbase_form\u201d (a clean version of the string),\nand the value being a set of all existing original values.\nThis is done using the StringCategory class."),(0,l.kt)("h3",{id:"is_string_columncolumn-pandascoreseriesseries"},"is_string_column(column: pandas.core.series.Series)"),(0,l.kt)("p",null,"Determine whether a pandas series is string type."),(0,l.kt)("h3",{id:"split_and_keeps-str-separators-unionstr-iterablestr"},"split_and_keep(s: str, separators: Union[str, Iterable","[str]","])"),(0,l.kt)("p",null,"Split string by a another substring into a list. Like str.split(), but keeps the separator occurrences in the list."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"s")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 the string to split")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"separators")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 the substring to split by")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  list of substrings, including the separator occurrences in string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  List","[str]"))),(0,l.kt)("h3",{id:"split_by_orders-str-separators-iterablestr-keep-bool--true"},"split_by_order(s: str, separators: Iterable","[str]",", keep: bool = True)"),(0,l.kt)("p",null,"Split string by a a list of substrings, each used once as a separator."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"s")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 the string to split")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"separators")," (",(0,l.kt)("em",{parentName:"p"},"List",(0,l.kt)("strong",{parentName:"em"},"["),"str**]"),") \u2013 list of substrings to split by")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"keep")," (",(0,l.kt)("em",{parentName:"p"},"bool"),") \u2013 whether to keep the separators in list as well. Default is True.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  list of substrings")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  List","[str]"))),(0,l.kt)("h3",{id:"split_camel_casestring-str"},"split_camel_case(string: str)"),(0,l.kt)("p",null,"Split string where there are capital letters and enter space instead."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"string")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 string to change"))),(0,l.kt)("h3",{id:"string_baseformstring-str"},"string_baseform(string: str)"),(0,l.kt)("p",null,"Remove special characters from given string, leaving only a-z, A-Z, 0-9 characters."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"string")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 string to remove special characters from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  string without special characters")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  (str)"))),(0,l.kt)("h2",{id:"deepchecksutilsvalidation-module"},"deepchecks.utils.validation module"),(0,l.kt)("p",null,"objects validation utilities."),(0,l.kt)("h3",{id:"model_type_validationmodel-any"},"model_type_validation(model: Any)"),(0,l.kt)("p",null,"Receive any object and check if it\u2019s an instance of a model we support."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 If the object is not of a supported type"))),(0,l.kt)("h2",{id:"module-contents"},"Module contents"),(0,l.kt)("p",null,"Package for utilities routines."))}u.isMDXComponent=!0}}]);