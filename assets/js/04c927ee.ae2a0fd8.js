"use strict";(self.webpackChunkdeepchecks_docs=self.webpackChunkdeepchecks_docs||[]).push([[698],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),k=c(a),m=l,u=k["".concat(o,".").concat(m)]||k[m]||d[m]||r;return a?n.createElement(u,s(s({ref:t},p),{},{components:a})):n.createElement(u,s({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6696:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return k}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),s=["components"],i={},o="deepchecks.base package",c={unversionedId:"api-reference/deepchecks.base",id:"api-reference/deepchecks.base",isDocsHomePage:!1,title:"deepchecks.base package",description:"Submodules",source:"@site/docs/api-reference/deepchecks.base.md",sourceDirName:"api-reference",slug:"/api-reference/deepchecks.base",permalink:"/docs/api-reference/deepchecks.base",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"deepchecks.checks.distribution package",permalink:"/docs/api-reference/deepchecks.checks.distribution"}},p=[{value:"Submodules",id:"submodules",children:[],level:2},{value:"deepchecks.base.check module",id:"deepchecksbasecheck-module",children:[{value:"class BaseCheck()",id:"class-basecheck",children:[{value:"__init__()",id:"__init__",children:[],level:4},{value:"__repr__(tabs=0, prefix=&#39;&#39;)",id:"__repr__tabs0-prefix",children:[],level:4},{value:"add_condition(name: str, condition_func: Callable[Any, Uniondeepchecks.base.check.ConditionResult, bool], **params)",id:"add_conditionname-str-condition_func-callableany-uniondeepchecksbasecheckconditionresult-bool-params",children:[],level:4},{value:"clean_conditions()",id:"clean_conditions",children:[],level:4},{value:"conditions_decision(result: deepchecks.base.check.CheckResult)",id:"conditions_decisionresult-deepchecksbasecheckcheckresult",children:[],level:4},{value:"classmethod name()",id:"classmethod-name",children:[],level:4},{value:"params()",id:"params",children:[],level:4},{value:"remove_condition(index: int)",id:"remove_conditionindex-int",children:[],level:4}],level:3},{value:"class CheckFailure()",id:"class-checkfailure",children:[{value:"__init__(check: Any, exception: Exception)",id:"__init__check-any-exception-exception",children:[],level:4},{value:"check(: Any)",id:"check-any",children:[],level:4},{value:"exception(: Exception)",id:"exception-exception",children:[],level:4}],level:3},{value:"class CheckResult()",id:"class-checkresult",children:[{value:"value()",id:"value",children:[],level:4},{value:"display()",id:"display",children:[],level:4},{value:"__init__(value, header: Optionalstr = None, check=None, display: OptionalAny = None)",id:"__init__value-header-optionalstr--none-checknone-display-optionalany--none",children:[],level:4},{value:"__repr__()",id:"__repr__",children:[],level:4},{value:"condition_results(: Listdeepchecks.base.check.ConditionResult)",id:"condition_results-listdeepchecksbasecheckconditionresult",children:[],level:4},{value:"display(: List[UnionCallable, str, pandas.core.frame.DataFrame, pandas.io.formats.style.Styler])",id:"display-listunioncallable-str-pandascoreframedataframe-pandasioformatsstylestyler",children:[],level:4},{value:"get_conditions_sort_value()",id:"get_conditions_sort_value",children:[],level:4},{value:"have_conditions()",id:"have_conditions",children:[],level:4},{value:"have_display()",id:"have_display",children:[],level:4},{value:"header(: str)",id:"header-str",children:[],level:4},{value:"passed_conditions()",id:"passed_conditions",children:[],level:4},{value:"set_condition_results(results: Listdeepchecks.base.check.ConditionResult)",id:"set_condition_resultsresults-listdeepchecksbasecheckconditionresult",children:[],level:4},{value:"value(: Any)",id:"value-any",children:[],level:4}],level:3},{value:"class CompareDatasetsBaseCheck()",id:"class-comparedatasetsbasecheck",children:[{value:"abstract run(dataset, baseline_dataset, model=None)",id:"abstract-rundataset-baseline_dataset-modelnone",children:[],level:4}],level:3},{value:"class ConditionCategory()",id:"class-conditioncategory",children:[{value:"FAIL( = &#39;FAIL&#39;)",id:"fail--fail",children:[],level:4},{value:"WARN( = &#39;WARN&#39;)",id:"warn--warn",children:[],level:4}],level:3},{value:"class ConditionResult()",id:"class-conditionresult",children:[{value:"__init__(is_pass: bool, details: str = &#39;&#39;, category: deepchecks.base.check.ConditionCategory = ConditionCategory.FAIL)",id:"__init__is_pass-bool-details-str---category-deepchecksbasecheckconditioncategory--conditioncategoryfail",children:[],level:4},{value:"__repr__()",id:"__repr__-1",children:[],level:4},{value:"category(: deepchecks.base.check.ConditionCategory)",id:"category-deepchecksbasecheckconditioncategory",children:[],level:4},{value:"details(: str)",id:"details-str",children:[],level:4},{value:"get_icon()",id:"get_icon",children:[],level:4},{value:"get_sort_value()",id:"get_sort_value",children:[],level:4},{value:"is_pass(: bool)",id:"is_pass-bool",children:[],level:4},{value:"name(: str)",id:"name-str",children:[],level:4},{value:"set_name(name: str)",id:"set_namename-str",children:[],level:4}],level:3},{value:"class ModelOnlyBaseCheck()",id:"class-modelonlybasecheck",children:[{value:"abstract run(model)",id:"abstract-runmodel",children:[],level:4}],level:3},{value:"class SingleDatasetBaseCheck()",id:"class-singledatasetbasecheck",children:[{value:"abstract run(dataset, model=None)",id:"abstract-rundataset-modelnone",children:[],level:4}],level:3},{value:"class TrainTestBaseCheck()",id:"class-traintestbasecheck",children:[{value:"abstract run(train_dataset, test_dataset, model=None)",id:"abstract-runtrain_dataset-test_dataset-modelnone",children:[],level:4}],level:3}],level:2},{value:"deepchecks.base.dataset module",id:"deepchecksbasedataset-module",children:[{value:"class Dataset()",id:"class-dataset",children:[{value:"_features()",id:"_features",children:[],level:4},{value:"_label()",id:"_label",children:[],level:4},{value:"_use_index()",id:"_use_index",children:[],level:4},{value:"_index_name()",id:"_index_name",children:[],level:4},{value:"_date_name()",id:"_date_name",children:[],level:4},{value:"cat_features()",id:"cat_features",children:[],level:4},{value:"_<em>init__(df: pandas.core.frame.DataFrame, features: Optional[Liststr] = None, cat_features: Optional[Liststr] = None, label: Optionalstr = None, use_index: bool = False, index: Optionalstr = None, date: Optionalstr = None, date_unit_type: Optionalstr = None, convert_date</em>: bool = True, max_categorical_ratio: float = 0.01, max_categories: int = 30, max_float_categories: int = 5)",id:"_init__df-pandascoreframedataframe-features-optionalliststr--none-cat_features-optionalliststr--none-label-optionalstr--none-use_index-bool--false-index-optionalstr--none-date-optionalstr--none-date_unit_type-optionalstr--none-convert_date-bool--true-max_categorical_ratio-float--001-max_categories-int--30-max_float_categories-int--5",children:[],level:4},{value:"cat_features(: Liststr)",id:"cat_features-liststr",children:[],level:4},{value:"check_compatible_labels()",id:"check_compatible_labels",children:[],level:4},{value:"copy(new_data)",id:"copynew_data",children:[],level:4},{value:"property data(: pandas.core.frame.DataFrame)",id:"property-data-pandascoreframedataframe",children:[],level:4},{value:"date_col()",id:"date_col",children:[],level:4},{value:"date_name()",id:"date_name",children:[],level:4},{value:"features()",id:"features",children:[],level:4},{value:"features_columns()",id:"features_columns",children:[],level:4},{value:"filter_columns_with_validation(columns: Optional[Union[str, Liststr]] = None, ignore_columns: Optional[Union[str, Liststr]] = None)",id:"filter_columns_with_validationcolumns-optionalunionstr-liststr--none-ignore_columns-optionalunionstr-liststr--none",children:[],level:4},{value:"index_col()",id:"index_col",children:[],level:4},{value:"index_name()",id:"index_name",children:[],level:4},{value:"infer_categorical_features()",id:"infer_categorical_features",children:[],level:4},{value:"is_categorical(col_name: str)",id:"is_categoricalcol_name-str",children:[],level:4},{value:"label_col()",id:"label_col",children:[],level:4},{value:"label_name()",id:"label_name",children:[],level:4},{value:"n_samples()",id:"n_samples",children:[],level:4},{value:"show_columns_info()",id:"show_columns_info",children:[],level:4},{value:"classmethod validate_dataset(obj, check_name: str)",id:"classmethod-validate_datasetobj-check_name-str",children:[],level:4},{value:"classmethod validate_dataset_or_dataframe(obj)",id:"classmethod-validate_dataset_or_dataframeobj",children:[],level:4},{value:"validate_date(check_name: str)",id:"validate_datecheck_name-str",children:[],level:4},{value:"validate_index(check_name: str)",id:"validate_indexcheck_name-str",children:[],level:4},{value:"validate_label(check_name: str)",id:"validate_labelcheck_name-str",children:[],level:4},{value:"validate_model(model)",id:"validate_modelmodel",children:[],level:4},{value:"validate_shared_categorical_features(other, check_name: str)",id:"validate_shared_categorical_featuresother-check_name-str",children:[],level:4},{value:"validate_shared_features(other, check_name: str)",id:"validate_shared_featuresother-check_name-str",children:[],level:4},{value:"validate_shared_label(other, check_name: str)",id:"validate_shared_labelother-check_name-str",children:[],level:4}],level:3},{value:"ensure_dataframe_type(obj: Any)",id:"ensure_dataframe_typeobj-any",children:[],level:3}],level:2},{value:"deepchecks.base.display_pandas module",id:"deepchecksbasedisplay_pandas-module",children:[{value:"dataframe_to_html(df: Unionpandas.core.frame.DataFrame, pandas.io.formats.style.Styler)",id:"dataframe_to_htmldf-unionpandascoreframedataframe-pandasioformatsstylestyler",children:[],level:3},{value:"display_dataframe(df: Unionpandas.core.frame.DataFrame, pandas.io.formats.style.Styler)",id:"display_dataframedf-unionpandascoreframedataframe-pandasioformatsstylestyler",children:[],level:3}],level:2},{value:"deepchecks.base.display_suite module",id:"deepchecksbasedisplay_suite-module",children:[{value:"class ProgressBar()",id:"class-progressbar",children:[{value:"__init__(name, length)",id:"__init__name-length",children:[],level:4},{value:"close()",id:"close",children:[],level:4},{value:"inc_progress()",id:"inc_progress",children:[],level:4},{value:"set_text(text)",id:"set_texttext",children:[],level:4}],level:3},{value:"display_suite_result(suite_name: str, results: List[Uniondeepchecks.base.check.CheckResult, deepchecks.base.check.CheckFailure])",id:"display_suite_resultsuite_name-str-results-listuniondeepchecksbasecheckcheckresult-deepchecksbasecheckcheckfailure",children:[],level:3}],level:2},{value:"deepchecks.base.suite module",id:"deepchecksbasesuite-module",children:[{value:"class Suite()",id:"class-suite",children:[{value:"checks()",id:"checks",children:[],level:4},{value:"__getitem__(index)",id:"__getitem__index",children:[],level:4},{value:"__init__(name: str, *checks)",id:"__init__name-str-checks",children:[],level:4},{value:"__repr__(tabs=0)",id:"__repr__tabs0",children:[],level:4},{value:"add(check)",id:"addcheck",children:[],level:4},{value:"checks(: collections.OrderedDict)",id:"checks-collectionsordereddict",children:[],level:4},{value:"remove(index: int)",id:"removeindex-int",children:[],level:4},{value:"run(train_dataset: Optionaldeepchecks.base.dataset.Dataset = None, test_dataset: Optionaldeepchecks.base.dataset.Dataset = None, model: Optionalobject = None, check_datasets_policy: str = &#39;test&#39;)",id:"runtrain_dataset-optionaldeepchecksbasedatasetdataset--none-test_dataset-optionaldeepchecksbasedatasetdataset--none-model-optionalobject--none-check_datasets_policy-str--test",children:[],level:4}],level:3},{value:"class SuiteResult()",id:"class-suiteresult",children:[{value:"__init__(name: str, results)",id:"__init__name-str-results",children:[],level:4},{value:"name(: str)",id:"name-str-1",children:[],level:4},{value:"results(: List[Uniondeepchecks.base.check.CheckResult, deepchecks.base.check.CheckFailure])",id:"results-listuniondeepchecksbasecheckcheckresult-deepchecksbasecheckcheckfailure",children:[],level:4}],level:3}],level:2},{value:"Module contents",id:"module-contents",children:[],level:2}],d={toc:p};function k(e){var t=e.components,a=(0,l.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deepchecksbase-package"},"deepchecks.base package"),(0,r.kt)("h2",{id:"submodules"},"Submodules"),(0,r.kt)("h2",{id:"deepchecksbasecheck-module"},"deepchecks.base.check module"),(0,r.kt)("p",null,"Module containing all the base classes for checks."),(0,r.kt)("h3",{id:"class-basecheck"},"class BaseCheck()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Base class for check."),(0,r.kt)("h4",{id:"__init__"},"_","_init__()"),(0,r.kt)("h4",{id:"__repr__tabs0-prefix"},"_","_repr__(tabs=0, prefix='')"),(0,r.kt)("p",null,"Representation of check as string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"tabs")," (",(0,r.kt)("em",{parentName:"p"},"int"),") \u2013 number of tabs to shift by the output"))),(0,r.kt)("h4",{id:"add_conditionname-str-condition_func-callableany-uniondeepchecksbasecheckconditionresult-bool-params"},"add_condition(name: str, condition_func: Callable[","[Any]",", Union","[deepchecks.base.check.ConditionResult, bool]","], ","*","*","params)"),(0,r.kt)("p",null,"Add new condition function to the check."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 Name of the condition. should explain the condition action and parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"condition_func")," (",(0,r.kt)("em",{parentName:"p"},"Callable",(0,r.kt)("strong",{parentName:"em"},"["),"[",(0,r.kt)("strong",{parentName:"em"},"Any"),"]",(0,r.kt)("strong",{parentName:"em"},", "),"Union",(0,r.kt)("strong",{parentName:"em"},"["),"List",(0,r.kt)("strong",{parentName:"em"},"["),"ConditionResult",(0,r.kt)("strong",{parentName:"em"},"]"),", ",(0,r.kt)("strong",{parentName:"em"},"bool"),"]**]"),") \u2013 Function which gets the value of the\ncheck and returns object of List","[ConditionResult]"," or boolean.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"params")," \u2013 Additional parameters to pass when calling the condition function."))))),(0,r.kt)("h4",{id:"clean_conditions"},"clean_conditions()"),(0,r.kt)("p",null,"Remove all conditions from this check instance."),(0,r.kt)("h4",{id:"conditions_decisionresult-deepchecksbasecheckcheckresult"},"conditions_decision(result: deepchecks.base.check.CheckResult)"),(0,r.kt)("p",null,"Run conditions on given result."),(0,r.kt)("h4",{id:"classmethod-name"},"classmethod name()"),(0,r.kt)("p",null,"Name of class in split camel case."),(0,r.kt)("h4",{id:"params"},"params()"),(0,r.kt)("p",null,"Return parameters to show when printing the check."),(0,r.kt)("h4",{id:"remove_conditionindex-int"},"remove_condition(index: int)"),(0,r.kt)("p",null,"Remove given condition by index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"index")," (",(0,r.kt)("em",{parentName:"p"},"int"),") \u2013 index of condtion to remove"))),(0,r.kt)("h3",{id:"class-checkfailure"},"class CheckFailure()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Class which holds a run exception of a check."),(0,r.kt)("h4",{id:"__init__check-any-exception-exception"},"_","_init__(check: Any, exception: Exception)"),(0,r.kt)("h4",{id:"check-any"},"check(: Any)"),(0,r.kt)("h4",{id:"exception-exception"},"exception(: Exception)"),(0,r.kt)("h3",{id:"class-checkresult"},"class CheckResult()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Class which returns from a check with result that can later be used for automatic pipelines and display value."),(0,r.kt)("p",null,"Class containing the result of a check"),(0,r.kt)("p",null,"The class stores the results and display of the check. Evaluating the result in an IPython console / notebook\nwill show the result display output."),(0,r.kt)("h4",{id:"value"},"value()"),(0,r.kt)("p",null,"Value calculated by check. Can be used to decide if decidable check passed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  Any"))),(0,r.kt)("h4",{id:"display"},"display()"),(0,r.kt)("p",null,"Dictionary with formatters for display. possible formatters are: \u2018text/html\u2019, \u2018image/png\u2019"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  Dict"))),(0,r.kt)("h4",{id:"__init__value-header-optionalstr--none-checknone-display-optionalany--none"},"_","_init__(value, header: Optional","[str]"," = None, check=None, display: Optional","[Any]"," = None)"),(0,r.kt)("p",null,"Init check result."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"value")," (",(0,r.kt)("em",{parentName:"p"},"Any"),") \u2013 Value calculated by check. Can be used to decide if decidable check passed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"header")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 Header to be displayed in python notebook.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check")," (",(0,r.kt)("em",{parentName:"p"},"Class"),") \u2013 The check class which created this result. Used to extract the summary to be")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"notebook.")," (",(0,r.kt)("em",{parentName:"p"},"displayed in"),") \u2013 ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"display")," (",(0,r.kt)("em",{parentName:"p"},"List"),") \u2013 Objects to be displayed (dataframe or function or html)"))))),(0,r.kt)("h4",{id:"__repr__"},"_","_repr__()"),(0,r.kt)("p",null,"Return default ",(0,r.kt)("strong",{parentName:"p"},"repr")," function uses value."),(0,r.kt)("h4",{id:"condition_results-listdeepchecksbasecheckconditionresult"},"condition_results(: List","[deepchecks.base.check.ConditionResult]",")"),(0,r.kt)("h4",{id:"display-listunioncallable-str-pandascoreframedataframe-pandasioformatsstylestyler"},"display(: List[Union","[Callable, str, pandas.core.frame.DataFrame, pandas.io.formats.style.Styler]","])"),(0,r.kt)("h4",{id:"get_conditions_sort_value"},"get_conditions_sort_value()"),(0,r.kt)("p",null,"Get largest sort value of the conditions results."),(0,r.kt)("h4",{id:"have_conditions"},"have_conditions()"),(0,r.kt)("p",null,"Return if this check have condition results."),(0,r.kt)("h4",{id:"have_display"},"have_display()"),(0,r.kt)("p",null,"Return if this check have dsiplay."),(0,r.kt)("h4",{id:"header-str"},"header(: str)"),(0,r.kt)("h4",{id:"passed_conditions"},"passed_conditions()"),(0,r.kt)("p",null,"Return if this check have not passing condition results."),(0,r.kt)("h4",{id:"set_condition_resultsresults-listdeepchecksbasecheckconditionresult"},"set_condition_results(results: List","[deepchecks.base.check.ConditionResult]",")"),(0,r.kt)("p",null,"Set the conditions results for current check result."),(0,r.kt)("h4",{id:"value-any"},"value(: Any)"),(0,r.kt)("h3",{id:"class-comparedatasetsbasecheck"},"class CompareDatasetsBaseCheck()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.BaseCheck")),(0,r.kt)("p",null,"Parent class for checks that compare between two datasets."),(0,r.kt)("h4",{id:"abstract-rundataset-baseline_dataset-modelnone"},"abstract run(dataset, baseline_dataset, model=None)"),(0,r.kt)("p",null,"Define run signature."),(0,r.kt)("h3",{id:"class-conditioncategory"},"class ConditionCategory()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"enum.Enum")),(0,r.kt)("p",null,"Condition result category. indicates whether the result should fail the suite."),(0,r.kt)("h4",{id:"fail--fail"},"FAIL( = 'FAIL')"),(0,r.kt)("h4",{id:"warn--warn"},"WARN( = 'WARN')"),(0,r.kt)("h3",{id:"class-conditionresult"},"class ConditionResult()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Contain result of a condition function."),(0,r.kt)("h4",{id:"__init__is_pass-bool-details-str---category-deepchecksbasecheckconditioncategory--conditioncategoryfail"},"_","_init__(is_pass: bool, details: str = '', category: deepchecks.base.check.ConditionCategory = ConditionCategory.FAIL)"),(0,r.kt)("p",null,"Initialize condition result."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"is_pass")," (",(0,r.kt)("em",{parentName:"p"},"bool"),") \u2013 Whether the condition functions passed the given value or not.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"details")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 What actually happened in the condition.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"category")," (",(0,r.kt)("em",{parentName:"p"},"ConditionCategory"),") \u2013 The category to which the condition result belongs."))))),(0,r.kt)("h4",{id:"__repr__-1"},"_","_repr__()"),(0,r.kt)("p",null,"Return string representation for printing."),(0,r.kt)("h4",{id:"category-deepchecksbasecheckconditioncategory"},"category(: deepchecks.base.check.ConditionCategory)"),(0,r.kt)("h4",{id:"details-str"},"details(: str)"),(0,r.kt)("h4",{id:"get_icon"},"get_icon()"),(0,r.kt)("p",null,"Return icon of the result to display."),(0,r.kt)("h4",{id:"get_sort_value"},"get_sort_value()"),(0,r.kt)("p",null,"Return sort value of the result."),(0,r.kt)("h4",{id:"is_pass-bool"},"is_pass(: bool)"),(0,r.kt)("h4",{id:"name-str"},"name(: str)"),(0,r.kt)("h4",{id:"set_namename-str"},"set_name(name: str)"),(0,r.kt)("p",null,"Set name to be displayed in table."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 Description of the condition to be displayed."))),(0,r.kt)("h3",{id:"class-modelonlybasecheck"},"class ModelOnlyBaseCheck()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.BaseCheck")),(0,r.kt)("p",null,"Parent class for checks that only use a model and no datasets."),(0,r.kt)("h4",{id:"abstract-runmodel"},"abstract run(model)"),(0,r.kt)("p",null,"Define run signature."),(0,r.kt)("h3",{id:"class-singledatasetbasecheck"},"class SingleDatasetBaseCheck()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.BaseCheck")),(0,r.kt)("p",null,"Parent class for checks that only use one dataset."),(0,r.kt)("h4",{id:"abstract-rundataset-modelnone"},"abstract run(dataset, model=None)"),(0,r.kt)("p",null,"Define run signature."),(0,r.kt)("h3",{id:"class-traintestbasecheck"},"class TrainTestBaseCheck()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.BaseCheck")),(0,r.kt)("p",null,"Parent class for checks that compare two datasets."),(0,r.kt)("p",null,"The class checks train dataset and test dataset for model training and test."),(0,r.kt)("h4",{id:"abstract-runtrain_dataset-test_dataset-modelnone"},"abstract run(train_dataset, test_dataset, model=None)"),(0,r.kt)("p",null,"Define run signature."),(0,r.kt)("h2",{id:"deepchecksbasedataset-module"},"deepchecks.base.dataset module"),(0,r.kt)("p",null,"The Dataset module containing the dataset Class and its functions."),(0,r.kt)("h3",{id:"class-dataset"},"class Dataset()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Dataset wraps pandas DataFrame together with ML related metadata."),(0,r.kt)("p",null,"The Dataset class is containing additional data and methods intended for easily accessing\nmetadata relevant for the training or validating of a ML models."),(0,r.kt)("h4",{id:"_features"},"_features()"),(0,r.kt)("p",null,"List of names for the feature columns in the DataFrame."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  List","[str]"))),(0,r.kt)("h4",{id:"_label"},"_label()"),(0,r.kt)("p",null,"Name of the label column in the DataFrame."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  Optional","[str]"))),(0,r.kt)("h4",{id:"_use_index"},"_use_index()"),(0,r.kt)("p",null,"Boolean value controlling whether the DataFrame index will be used by the index_col() method."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  bool"))),(0,r.kt)("h4",{id:"_index_name"},"_index_name()"),(0,r.kt)("p",null,"Name of the index column in the DataFrame."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  Optional","[str]"))),(0,r.kt)("h4",{id:"_date_name"},"_date_name()"),(0,r.kt)("p",null,"Name of the date column in the DataFrame."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  Optional","[str]"))),(0,r.kt)("h4",{id:"cat_features"},"cat_features()"),(0,r.kt)("p",null,"List of names for the categorical features in the DataFrame."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  List","[str]"))),(0,r.kt)("h4",{id:"_init__df-pandascoreframedataframe-features-optionalliststr--none-cat_features-optionalliststr--none-label-optionalstr--none-use_index-bool--false-index-optionalstr--none-date-optionalstr--none-date_unit_type-optionalstr--none-convert_date-bool--true-max_categorical_ratio-float--001-max_categories-int--30-max_float_categories-int--5"},"_",(0,r.kt)("em",{parentName:"h4"},"init__(df: pandas.core.frame.DataFrame, features: Optional[List","[str]","] = None, cat_features: Optional[List","[str]","] = None, label: Optional","[str]"," = None, use_index: bool = False, index: Optional","[str]"," = None, date: Optional","[str]"," = None, date_unit_type: Optional","[str]"," = None, convert_date"),": bool = True, max_categorical_ratio: float = 0.01, max_categories: int = 30, max_float_categories: int = 5)"),(0,r.kt)("p",null,"Initiate the Dataset using a pandas DataFrame and Metadata."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"df")," \u2013 A pandas DataFrame containing data relevant for the training or validating of a ML models")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"features")," \u2013 List of names for the feature columns in the DataFrame.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"cat_features")," \u2013 List of names for the categorical features in the DataFrame. In order to disable categorical\nfeatures inference, pass cat_features=[]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"label")," \u2013 Name of the label column in the DataFrame.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"use_index")," \u2013 Whether to use the dataframe index as the index column, for index related checks.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"index")," \u2013 Name of the index column in the DataFrame.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"date")," \u2013 Name of the date column in the DataFrame.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"date_unit_type")," \u2013 Unit used for conversion if date column is of type int or float.\nThe valid values are \u2018D\u2019, \u2018h\u2019, \u2018m\u2019, \u2018s\u2019, \u2018ms\u2019, \u2018us\u2019, and \u2018ns\u2019.\ne.g. \u2018s\u2019 for seconds, \u2018ns\u2019 for nanoseconds. See pandas.Timestamp unit arg for more detail.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"max_categorical_ratio")," \u2013 The max ratio of unique values in a column in order for it to be inferred as a\ncategorical feature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"max_categories")," \u2013 The maximum number of categories in a column in order for it to be inferred as a categorical\nfeature.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"max_float_categories")," \u2013 The maximum number of categories in a float column in order fo it to be inferred as a\ncategorical feature"))))),(0,r.kt)("h4",{id:"cat_features-liststr"},"cat_features(: List","[str]",")"),(0,r.kt)("h4",{id:"check_compatible_labels"},"check_compatible_labels()"),(0,r.kt)("p",null,"Check if label column is supported by deepchecks."),(0,r.kt)("h4",{id:"copynew_data"},"copy(new_data)"),(0,r.kt)("p",null,"Create a copy of this Dataset with new data."),(0,r.kt)("h4",{id:"property-data-pandascoreframedataframe"},"property data(: pandas.core.frame.DataFrame)"),(0,r.kt)("p",null,"Return the data of dataset."),(0,r.kt)("h4",{id:"date_col"},"date_col()"),(0,r.kt)("p",null,"Return date column if exists."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Series of the date column")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  (Series)"))),(0,r.kt)("h4",{id:"date_name"},"date_name()"),(0,r.kt)("p",null,"If date column exists, return its name."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  (str) date column name"))),(0,r.kt)("h4",{id:"features"},"features()"),(0,r.kt)("p",null,"Return list of feature names."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  List of feature names."))),(0,r.kt)("h4",{id:"features_columns"},"features_columns()"),(0,r.kt)("p",null,"Return features columns if exists."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Features columns"))),(0,r.kt)("h4",{id:"filter_columns_with_validationcolumns-optionalunionstr-liststr--none-ignore_columns-optionalunionstr-liststr--none"},"filter_columns_with_validation(columns: Optional[Union[str, List","[str]","]] = None, ignore_columns: Optional[Union[str, List","[str]","]] = None)"),(0,r.kt)("p",null,"Filter dataset columns by given params."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"columns")," (",(0,r.kt)("em",{parentName:"p"},"Union",(0,r.kt)("strong",{parentName:"em"},"["),"str",(0,r.kt)("strong",{parentName:"em"},", "),"List",(0,r.kt)("strong",{parentName:"em"},"["),"str",(0,r.kt)("strong",{parentName:"em"},"]"),", ",(0,r.kt)("strong",{parentName:"em"},"None"),"]"),") \u2013 Column names to keep.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ignore_columns")," (",(0,r.kt)("em",{parentName:"p"},"Union",(0,r.kt)("strong",{parentName:"em"},"["),"str",(0,r.kt)("strong",{parentName:"em"},", "),"List",(0,r.kt)("strong",{parentName:"em"},"["),"str",(0,r.kt)("strong",{parentName:"em"},"]"),", ",(0,r.kt)("strong",{parentName:"em"},"None"),"]"),") \u2013 Column names to drop.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 In case one of columns given don\u2019t exists raise error"))),(0,r.kt)("h4",{id:"index_col"},"index_col()"),(0,r.kt)("p",null,"Return index column. Index can be a named column or DataFrame index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  If date column exists, returns a pandas Series of the index column."))),(0,r.kt)("h4",{id:"index_name"},"index_name()"),(0,r.kt)("p",null,"If index column exists, return its name."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  (str) index column name"))),(0,r.kt)("h4",{id:"infer_categorical_features"},"infer_categorical_features()"),(0,r.kt)("p",null,"Infers which features are categorical by checking types and number of unique values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Out of the list of feature names, returns list of categorical features"))),(0,r.kt)("h4",{id:"is_categoricalcol_name-str"},"is_categorical(col_name: str)"),(0,r.kt)("p",null,"Check if uniques are few enough to count as categorical."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"col_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 The name of the column in the dataframe")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  If is categorical according to input numbers"))),(0,r.kt)("h4",{id:"label_col"},"label_col()"),(0,r.kt)("p",null,"Return label column if exists."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Label column"))),(0,r.kt)("h4",{id:"label_name"},"label_name()"),(0,r.kt)("p",null,"If label column exists, return its name."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  (str) Label name"))),(0,r.kt)("h4",{id:"n_samples"},"n_samples()"),(0,r.kt)("p",null,"Return number of samples in dataframe."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Number of samples in dataframe"))),(0,r.kt)("h4",{id:"show_columns_info"},"show_columns_info()"),(0,r.kt)("p",null,"Return the role and logical type of each column."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  Diractory of a column and its role"))),(0,r.kt)("h4",{id:"classmethod-validate_datasetobj-check_name-str"},"classmethod validate_dataset(obj, check_name: str)"),(0,r.kt)("p",null,"Throws error if object is not deepchecks Dataset and returns the object if deepchecks Dataset."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"obj")," \u2013 object to validate as dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  object that is deepchecks dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  (Dataset)"))),(0,r.kt)("h4",{id:"classmethod-validate_dataset_or_dataframeobj"},"classmethod validate_dataset_or_dataframe(obj)"),(0,r.kt)("p",null,"Raise error if object is not pandas DataFrame or deepcheck Dataset and returns the object as deepchecks Dataset."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"obj")," \u2013 object to validate as dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  object converted to deepchecks dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  (Dataset)"))),(0,r.kt)("h4",{id:"validate_datecheck_name-str"},"validate_date(check_name: str)"),(0,r.kt)("p",null,"Throws error if dataset does not have a date column."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if dataset does not have a date column")," \u2013 "))),(0,r.kt)("h4",{id:"validate_indexcheck_name-str"},"validate_index(check_name: str)"),(0,r.kt)("p",null,"Throws error if dataset does not have an index column / does not use dataframe index as index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if dataset does not have an index")," \u2013 "))),(0,r.kt)("h4",{id:"validate_labelcheck_name-str"},"validate_label(check_name: str)"),(0,r.kt)("p",null,"Throws error if dataset does not have a label."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if dataset does not have a label")," \u2013 "))),(0,r.kt)("h4",{id:"validate_modelmodel"},"validate_model(model)"),(0,r.kt)("p",null,"Check model is able to predict on the dataset."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError")," \u2013 if dataset does not match model"))),(0,r.kt)("h4",{id:"validate_shared_categorical_featuresother-check_name-str"},"validate_shared_categorical_features(other, check_name: str)"),(0,r.kt)("p",null,"Return list of categorical features if both datasets have the same categorical features. Else, raise error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"other")," \u2013 Expected to be Dataset type. dataset to compare features list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  List","[str]"," - list of shared features names")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if datasets don't have the same features")," \u2013 "))),(0,r.kt)("h4",{id:"validate_shared_featuresother-check_name-str"},"validate_shared_features(other, check_name: str)"),(0,r.kt)("p",null,"Return the list of shared features if both datasets have the same feature column names. Else, raise error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"other")," \u2013 Expected to be Dataset type. dataset to compare features list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  List","[str]"," - list of shared features names")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if datasets don't have the same features")," \u2013 "))),(0,r.kt)("h4",{id:"validate_shared_labelother-check_name-str"},"validate_shared_label(other, check_name: str)"),(0,r.kt)("p",null,"Return the list of shared features if both datasets have the same feature column names. Else, raise error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"other")," \u2013 Expected to be Dataset type. dataset to compare features list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check_name")," (",(0,r.kt)("em",{parentName:"p"},"str"),") \u2013 check name to print in error")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  List","[str]"," - list of shared features names")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"DeepchecksValueError if datasets don't have the same features")," \u2013 "))),(0,r.kt)("h3",{id:"ensure_dataframe_typeobj-any"},"ensure_dataframe_type(obj: Any)"),(0,r.kt)("p",null,"Ensure that given object is of type DataFrame or Dataset and return it as DataFrame. else raise error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"obj")," \u2013 Object to ensure it is DataFrame or Dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  (pd.DataFrame)"))),(0,r.kt)("h2",{id:"deepchecksbasedisplay_pandas-module"},"deepchecks.base.display_pandas module"),(0,r.kt)("p",null,"Handle displays of pandas objects."),(0,r.kt)("h3",{id:"dataframe_to_htmldf-unionpandascoreframedataframe-pandasioformatsstylestyler"},"dataframe_to_html(df: Union","[pandas.core.frame.DataFrame, pandas.io.formats.style.Styler]",")"),(0,r.kt)("p",null,"Convert dataframe to html."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"df")," (",(0,r.kt)("em",{parentName:"p"},"Union",(0,r.kt)("strong",{parentName:"em"},"["),"pd.DataFrame",(0,r.kt)("strong",{parentName:"em"},", "),"Styler**]"),") \u2013 Dataframe to convert to html"))),(0,r.kt)("h3",{id:"display_dataframedf-unionpandascoreframedataframe-pandasioformatsstylestyler"},"display_dataframe(df: Union","[pandas.core.frame.DataFrame, pandas.io.formats.style.Styler]",")"),(0,r.kt)("p",null,"Display in IPython given dataframe."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"df")," (",(0,r.kt)("em",{parentName:"p"},"Union",(0,r.kt)("strong",{parentName:"em"},"["),"pd.DataFrame",(0,r.kt)("strong",{parentName:"em"},", "),"Styler**]"),") \u2013 Dataframe to display"))),(0,r.kt)("h2",{id:"deepchecksbasedisplay_suite-module"},"deepchecks.base.display_suite module"),(0,r.kt)("p",null,"Handle display of suite result."),(0,r.kt)("h3",{id:"class-progressbar"},"class ProgressBar()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Progress bar for display while running suite."),(0,r.kt)("h4",{id:"__init__name-length"},"_","_init__(name, length)"),(0,r.kt)("p",null,"Initialize progress bar."),(0,r.kt)("h4",{id:"close"},"close()"),(0,r.kt)("p",null,"Close the progress bar."),(0,r.kt)("h4",{id:"inc_progress"},"inc_progress()"),(0,r.kt)("p",null,"Increase progress bar value by 1."),(0,r.kt)("h4",{id:"set_texttext"},"set_text(text)"),(0,r.kt)("p",null,"Set current running check."),(0,r.kt)("h3",{id:"display_suite_resultsuite_name-str-results-listuniondeepchecksbasecheckcheckresult-deepchecksbasecheckcheckfailure"},"display_suite_result(suite_name: str, results: List[Union","[deepchecks.base.check.CheckResult, deepchecks.base.check.CheckFailure]","])"),(0,r.kt)("p",null,"Display results of suite in IPython."),(0,r.kt)("h2",{id:"deepchecksbasesuite-module"},"deepchecks.base.suite module"),(0,r.kt)("p",null,"Module containing the Suite object, used for running a set of checks together."),(0,r.kt)("h3",{id:"class-suite"},"class Suite()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"deepchecks.base.check.BaseCheck")),(0,r.kt)("p",null,"Class for running a set of checks together, and returning a unified pass / no-pass."),(0,r.kt)("h4",{id:"checks"},"checks()"),(0,r.kt)("p",null,"A list of checks to run."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("p",{parentName:"li"},"  collections.OrderedDict"))),(0,r.kt)("h4",{id:"__getitem__index"},"_","_getitem__(index)"),(0,r.kt)("p",null,"Access check inside the suite by name."),(0,r.kt)("h4",{id:"__init__name-str-checks"},"_","_init__(name: str, ","*","checks)"),(0,r.kt)("p",null,"Get \u2018Check\u2019s and \u2018Suite\u2019s to run in given order."),(0,r.kt)("h4",{id:"__repr__tabs0"},"_","_repr__(tabs=0)"),(0,r.kt)("p",null,"Representation of suite as string."),(0,r.kt)("h4",{id:"addcheck"},"add(check)"),(0,r.kt)("p",null,"Add a check or a suite to current suite."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"check")," (",(0,r.kt)("em",{parentName:"p"},"BaseCheck"),") \u2013 A check or suite to add."))),(0,r.kt)("h4",{id:"checks-collectionsordereddict"},"checks(: collections.OrderedDict)"),(0,r.kt)("h4",{id:"removeindex-int"},"remove(index: int)"),(0,r.kt)("p",null,"Remove a check by given index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"index")," (",(0,r.kt)("em",{parentName:"p"},"int"),") \u2013 Index of check to remove."))),(0,r.kt)("h4",{id:"runtrain_dataset-optionaldeepchecksbasedatasetdataset--none-test_dataset-optionaldeepchecksbasedatasetdataset--none-model-optionalobject--none-check_datasets_policy-str--test"},"run(train_dataset: Optional","[deepchecks.base.dataset.Dataset]"," = None, test_dataset: Optional","[deepchecks.base.dataset.Dataset]"," = None, model: Optional","[object]"," = None, check_datasets_policy: str = 'test')"),(0,r.kt)("p",null,"Run all checks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"model")," \u2013 A scikit-learn-compatible fitted estimator instance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"train_dataset")," \u2013 Dataset object, representing data an estimator was fitted on")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"test_dataset")," \u2013 Dataset object, representing data an estimator predicts on")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"check_datasets_policy")," \u2013 str, one of either ","[\u2018both\u2019, \u2018train\u2019, \u2018test\u2019]",".\nDetermines the policy by which single dataset checks are run when two datasets are\ngiven, one for train and the other for test.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  List","[CheckResult]"," - All results by all initialized checks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Raises")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("strong",{parentName:"p"},"ValueError if check_datasets_policy is not of allowed types")," \u2013 "))),(0,r.kt)("h3",{id:"class-suiteresult"},"class SuiteResult()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Contain the results of a suite run."),(0,r.kt)("h4",{id:"__init__name-str-results"},"_","_init__(name: str, results)"),(0,r.kt)("p",null,"Initialize suite result."),(0,r.kt)("h4",{id:"name-str-1"},"name(: str)"),(0,r.kt)("h4",{id:"results-listuniondeepchecksbasecheckcheckresult-deepchecksbasecheckcheckfailure"},"results(: List[Union","[deepchecks.base.check.CheckResult, deepchecks.base.check.CheckFailure]","])"),(0,r.kt)("h2",{id:"module-contents"},"Module contents"),(0,r.kt)("p",null,"Module for base classes."),(0,r.kt)("p",null,"Import objects to be available in parent deepchecks module."))}k.isMDXComponent=!0}}]);